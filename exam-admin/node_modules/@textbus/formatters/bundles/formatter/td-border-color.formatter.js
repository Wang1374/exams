import { BlockFormatter, FormatData, FormatEffect, FormatterPriority } from '@textbus/core';
export class TdBorderColorFormatter extends BlockFormatter {
    constructor() {
        super({
            styles: {
                borderColor: /.+/
            }
        }, FormatterPriority.BlockStyle);
    }
    match(p) {
        if (/^(td|th)$/.test(p.nodeName.toLowerCase())) {
            const style = p.style;
            if (style.borderColor ||
                style.borderLeftColor ||
                style.borderTopColor ||
                style.borderRightColor ||
                style.borderBottomColor) {
                return FormatEffect.Valid;
            }
        }
        return FormatEffect.Invalid;
    }
    read(node) {
        const styles = node.style;
        const obj = {};
        ['borderColor', 'borderLeftColor', 'borderTopColor', 'borderRightColor', 'borderBottomColor'].forEach(key => {
            const value = styles[key];
            if (value) {
                if (key !== 'borderColor' && value === obj['borderColor']) {
                    return;
                }
                obj[key] = value;
            }
        });
        return new FormatData({
            styles: obj
        });
    }
    render(context, existingElement) {
        if (existingElement) {
            context.formatData.styles.forEach((value, key) => {
                existingElement.styles.set(key, value);
            });
        }
        return null;
    }
}
export const tdBorderColorFormatter = new TdBorderColorFormatter();
//# sourceMappingURL=td-border-color.formatter.js.map
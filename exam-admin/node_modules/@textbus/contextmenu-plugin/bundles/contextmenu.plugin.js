var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable, Input, I18n, RootComponent, BrComponent, TBSelection } from '@textbus/core';
import { BlockComponent } from '@textbus/components';
let ContextmenuPlugin = class ContextmenuPlugin {
    constructor(input, i18n, selection, rootComponent) {
        this.input = input;
        this.i18n = i18n;
        this.selection = selection;
        this.rootComponent = rootComponent;
    }
    setup() {
        this.input.addContextMenus([{
                iconClasses: ['textbus-icon-insert-paragraph-before'],
                label: this.i18n.get('plugins.contextmenu.insertParagraphBefore'),
                action: () => {
                    this.insertParagraph(true);
                }
            }, {
                iconClasses: ['textbus-icon-insert-paragraph-after'],
                label: this.i18n.get('plugins.contextmenu.insertParagraphAfter'),
                action: () => {
                    this.insertParagraph(false);
                }
            }]);
    }
    insertParagraph(insertBefore) {
        const selection = this.selection;
        if (selection.rangeCount === 0) {
            return;
        }
        const firstRange = selection.firstRange;
        let component = selection.commonAncestorComponent;
        if (component === this.rootComponent) {
            const commonAncestorFragmentScope = firstRange.getCommonAncestorFragmentScope();
            component = insertBefore ?
                commonAncestorFragmentScope.startChildComponent :
                commonAncestorFragmentScope.endChildComponent;
        }
        const parentFragment = component.parentFragment;
        const p = new BlockComponent('p');
        p.slot.append(new BrComponent());
        insertBefore ? parentFragment.insertBefore(p, component) : parentFragment.insertAfter(p, component);
        selection.removeAllRanges();
        firstRange.setStart(p.slot, 0);
        firstRange.collapse();
        selection.addRange(firstRange);
    }
};
ContextmenuPlugin = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [Input,
        I18n,
        TBSelection,
        RootComponent])
], ContextmenuPlugin);
export { ContextmenuPlugin };
//# sourceMappingURL=contextmenu.plugin.js.map
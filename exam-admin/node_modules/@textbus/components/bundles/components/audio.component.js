var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AudioComponent_1;
import { LeafAbstractComponent, VElement, Component } from '@textbus/core';
class AudioComponentLoader {
    constructor() {
        this.tagName = 'audio';
    }
    match(component) {
        return component.nodeName.toLowerCase() === this.tagName;
    }
    read(el) {
        return {
            component: new AudioComponent(el.src, el.autoplay, el.controls),
            slotsMap: []
        };
    }
}
let AudioComponent = AudioComponent_1 = class AudioComponent extends LeafAbstractComponent {
    constructor(src, autoplay, controls) {
        super('audio');
        this.src = src;
        this.autoplay = autoplay;
        this.controls = controls;
        this.block = false;
    }
    render() {
        const el = new VElement(this.tagName);
        el.attrs.set('src', this.src);
        el.attrs.set('autoplay', this.autoplay);
        el.attrs.set('controls', this.controls);
        return el;
    }
    clone() {
        return new AudioComponent_1(this.src, this.autoplay, this.controls);
    }
};
AudioComponent = AudioComponent_1 = __decorate([
    Component({
        loader: new AudioComponentLoader()
    }),
    __metadata("design:paramtypes", [String, Boolean, Boolean])
], AudioComponent);
export { AudioComponent };
//# sourceMappingURL=audio.component.js.map
import 'prismjs/components/prism-typescript';
import 'prismjs/components/prism-java';
import 'prismjs/components/prism-powershell';
import 'prismjs/components/prism-swift';
import 'prismjs/components/prism-json';
import 'prismjs/components/prism-css';
import 'prismjs/components/prism-less';
import 'prismjs/components/prism-scss';
import 'prismjs/components/prism-stylus';
import 'prismjs/components/prism-c';
import 'prismjs/components/prism-cpp';
import 'prismjs/components/prism-csharp';
import 'prismjs/components/prism-go';
import { BackboneAbstractComponent, Fragment, SlotRenderFn, VElement, SingleSlotRenderFn } from '@textbus/core';
export declare const codeStyles: {
    keyword: string;
    string: string;
    function: string;
    number: string;
    tag: string;
    comment: string;
    boolean: string;
    operator: boolean;
    builtin: string;
    punctuation: boolean;
    regex: string;
    selector: string;
    property: string;
    'class-name': string;
    'attr-name': string;
    'attr-value': string;
    'template-punctuation': string;
};
export declare type PreTheme = 'dark' | 'light';
declare class CodeFragment extends Fragment {
    set blockCommentStart(b: boolean);
    get blockCommentStart(): boolean;
    get code(): string;
    blockCommentEnd: boolean;
    private isBlockComment;
}
export declare class PreComponent extends BackboneAbstractComponent<CodeFragment> {
    static theme: PreTheme;
    set lang(v: string);
    get lang(): string;
    private _lang;
    constructor(lang: string, code: string);
    map<U>(callbackFn: (value: CodeFragment, index: number, array: CodeFragment[]) => U, thisArg?: any): U[];
    splice(start: number, deleteCount: number, ...items: CodeFragment[]): CodeFragment[];
    clone(): PreComponent;
    canDelete(deletedSlot: CodeFragment): boolean;
    componentContentChange(): void;
    slotRender(slot: Fragment, isOutputMode: boolean, slotRendererFn: SingleSlotRenderFn): VElement;
    render(isOutputMode: boolean, slotRendererFn: SlotRenderFn): VElement;
    setSourceCode(code: string): void;
    getSourceCode(): string;
    private reformat;
    private format;
    private getLanguageGrammar;
    private getLanguageBlockCommentStart;
}
export {};

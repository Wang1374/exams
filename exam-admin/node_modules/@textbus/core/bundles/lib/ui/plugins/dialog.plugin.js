var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@tanbo/di';
import { createElement } from '../_utils/uikit';
import { Layout } from '../layout';
import { EditorController } from '../../editor-controller';
let UIDialog = class UIDialog {
    constructor(layout, editorController) {
        this.layout = layout;
        this.editorController = editorController;
        this.timer = null;
        this.subs = [];
    }
    setup() {
        this.elementRef = createElement('div', {
            classes: ['textbus-dialog'],
            children: [
                this.dialogWrapper = createElement('div', {
                    classes: ['textbus-dialog-wrapper']
                })
            ]
        });
        this.layout.workbench.appendChild(this.elementRef);
        this.subs.push(this.editorController.onStateChange.subscribe(status => {
            if (status.readonly || status.sourcecodeMode) {
                this.close();
            }
        }));
    }
    dialog(element) {
        this.dialogWrapper.innerHTML = '';
        this.dialogWrapper.appendChild(element);
        this.elementRef.classList.add('textbus-dialog-active');
        this.timer = setTimeout(() => {
            this.dialogWrapper.classList.add('textbus-dialog-wrapper-active');
        }, 200);
    }
    close() {
        this.dialogWrapper.classList.remove('textbus-dialog-wrapper-active');
        this.timer = setTimeout(() => {
            this.elementRef.classList.remove('textbus-dialog-active');
            this.dialogWrapper.innerHTML = '';
        }, 200);
    }
    onDestroy() {
        clearTimeout(this.timer);
        this.subs.forEach(i => i.unsubscribe());
    }
};
UIDialog = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [Layout,
        EditorController])
], UIDialog);
export { UIDialog };
//# sourceMappingURL=dialog.plugin.js.map
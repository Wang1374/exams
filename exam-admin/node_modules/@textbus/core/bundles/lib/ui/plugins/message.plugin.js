var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@tanbo/di';
import { createElement, createTextNode } from '../_utils/_api';
import { Layout } from '../layout';
let UIMessage = class UIMessage {
    constructor(layout) {
        this.layout = layout;
    }
    setup() {
        this.messageBox = createElement('div', {
            classes: ['textbus-message']
        });
        this.layout.workbench.append(this.messageBox);
    }
    message(message, time) {
        this.createMessage('message', message, time);
    }
    info(message, time) {
        this.createMessage('info', message, time);
    }
    success(message, time) {
        this.createMessage('success', message, time);
    }
    warning(message, time) {
        this.createMessage('warning', message, time);
    }
    danger(message, time) {
        this.createMessage('danger', message, time);
    }
    createMessage(type, message, time = 3000) {
        const tip = createElement('div', {
            classes: ['textbus-message-item', 'textbus-message-item-' + type],
            children: [createTextNode(message)]
        });
        this.messageBox.append(tip);
        setTimeout(() => {
            tip.remove();
        }, time);
    }
};
UIMessage = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [Layout])
], UIMessage);
export { UIMessage };
//# sourceMappingURL=message.plugin.js.map
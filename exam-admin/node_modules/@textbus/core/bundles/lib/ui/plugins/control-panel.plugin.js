var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@tanbo/di';
import { createElement } from '../_utils/_api';
import { EditorController } from '../../editor-controller';
import { Tab } from '../_utils/tab';
import { Layout } from '../layout';
import { I18n } from '../../i18n/i18n';
let UIControlPanel = class UIControlPanel {
    constructor(editorController, i18n, layout) {
        this.editorController = editorController;
        this.i18n = i18n;
        this.layout = layout;
        this._fixed = false;
        this.subs = [];
        this.oldViews = [];
        this.tab = new Tab();
    }
    set fixed(b) {
        this._fixed = b;
        if (b) {
            this.layout.dashboard.insertBefore(this.elementRef, this.layout.rightContainer);
            this.elementRef.classList.add('textbus-control-panel-fixed');
            this.fixedBtn.classList.add('textbus-control-panel-fixed-btn-active');
            this.fixedBtn.title = this.i18n.get('editor.controlPanel.cancelFixed');
        }
        else {
            this.layout.viewer.append(this.elementRef);
            this.elementRef.classList.remove('textbus-control-panel-fixed');
            this.fixedBtn.classList.remove('textbus-control-panel-fixed-btn-active');
            this.fixedBtn.title = this.i18n.get('editor.controlPanel.fixed');
        }
    }
    get fixed() {
        return this._fixed;
    }
    setup() {
        this.elementRef = createElement('div', {
            classes: ['textbus-control-panel'],
            children: [
                this.container = createElement('div', {
                    classes: ['textbus-control-panel-container'],
                    children: [
                        this.tab.elementRef
                    ]
                })
            ]
        });
        this.fixedBtn = createElement('button', {
            attrs: {
                type: 'button',
                title: this.i18n.get('editor.controlPanel.fixed')
            },
            classes: ['textbus-control-panel-fixed-btn'],
            children: [createElement('span', {
                    classes: ['textbus-icon-pushpin']
                })]
        });
        this.fixedBtn.addEventListener('click', () => {
            this.fixed = !this.fixed;
        });
        this.tab.head.insertBefore(this.fixedBtn, this.tab.head.children[0]);
        this.subs.push(this.editorController.onStateChange.subscribe(status => {
            if (status.readonly) {
                this.fixed = false;
            }
        }));
        this.fixed = false;
    }
    showPanels(views) {
        this.oldViews.forEach(view => {
            var _a;
            (_a = view.onDestroy) === null || _a === void 0 ? void 0 : _a.call(view);
        });
        this.oldViews = views;
        if (views.length === 0) {
            this.tab.show([]);
            this.elementRef.classList.remove('textbus-control-panel-show');
            return;
        }
        this.elementRef.classList.add('textbus-control-panel-show');
        const tabs = views.map(view => {
            return {
                label: view.title,
                view: view.view
            };
        });
        this.tab.show(tabs);
    }
    onDestroy() {
        this.subs.forEach(s => s.unsubscribe());
    }
};
UIControlPanel = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [EditorController,
        I18n,
        Layout])
], UIControlPanel);
export { UIControlPanel };
//# sourceMappingURL=control-panel.plugin.js.map
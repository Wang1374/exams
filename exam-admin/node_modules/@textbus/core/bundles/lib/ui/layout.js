var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@tanbo/di';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import { createElement } from './_utils/_api';
import { iframeHTML } from './iframe-html';
import { EditorController } from '../editor-controller';
let Layout = class Layout {
    constructor(editorController) {
        this.editorController = editorController;
        this._topBar = createElement('div', {
            classes: ['textbus-ui-top']
        });
        this._bottomBar = createElement('div', {
            classes: ['textbus-ui-bottom', 'textbus-status-bar']
        });
        this.isAppendTop = false;
        this.isAppendBottom = false;
        this.onReadyEvent = new Subject();
        this.subs = [];
        this.onReady = this.onReadyEvent.asObservable();
        this.iframe = this.createEditableFrame();
        const onMessage = (ev) => {
            if (ev.data === 'complete') {
                if (this.iframe.contentDocument) {
                    window.removeEventListener('message', onMessage);
                    this.onReadyEvent.next(this.iframe.contentDocument);
                    this.ready();
                }
            }
        };
        window.addEventListener('message', onMessage);
        this.container = createElement('div', {
            classes: ['textbus-container'],
            children: [
                this.workbench = createElement('div', {
                    classes: ['textbus-ui-workbench'],
                    children: [
                        this.dashboard = createElement('div', {
                            classes: ['textbus-ui-dashboard'],
                            children: [
                                this.leftContainer = createElement('div', {
                                    classes: ['textbus-ui-left']
                                }),
                                this.viewer = createElement('div', {
                                    classes: ['textbus-ui-viewer'],
                                    children: [
                                        this.scroller = createElement('div', {
                                            classes: ['textbus-ui-scroll'],
                                            children: [
                                                this.pageContainer = createElement('div', {
                                                    classes: ['textbus-ui-page'],
                                                    children: [
                                                        this.docContainer = createElement('div', {
                                                            classes: ['textbus-ui-doc'],
                                                            children: [
                                                                this.iframe
                                                            ]
                                                        })
                                                    ]
                                                }),
                                                this.loading = createElement('div', {
                                                    classes: ['textbus-loading'],
                                                    props: {
                                                        innerHTML: 'TextBus'.split('').map(t => `<div>${t}</div>`).join('')
                                                    }
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                this.rightContainer = createElement('div', {
                                    classes: ['textbus-ui-right']
                                })
                            ]
                        })
                    ]
                })
            ]
        });
        this.subs.push(this.editorController.onStateChange.pipe(map(s => s.readonly)).subscribe(b => {
            if (b) {
                this.container.classList.add('textbus-readonly');
            }
            else {
                this.container.classList.remove('textbus-readonly');
            }
        }));
    }
    get topBar() {
        if (!this.isAppendTop) {
            this.container.prepend(this._topBar);
            this.isAppendTop = true;
        }
        return this._topBar;
    }
    get bottomBar() {
        if (!this.isAppendBottom) {
            this.container.append(this._bottomBar);
            this.isAppendBottom = true;
        }
        return this._bottomBar;
    }
    setTheme(theme) {
        this.container.classList.add('textbus-theme-' + theme);
    }
    destroy() {
        this.subs.forEach(i => i.unsubscribe());
    }
    ready() {
        this.loading.classList.add('textbus-loading-done');
        this.pageContainer.classList.add('textbus-ui-page-ready');
        setTimeout(() => {
            this.scroller.removeChild(this.loading);
        }, 300);
    }
    createEditableFrame() {
        return createElement('iframe', {
            attrs: {
                src: `javascript:void(
      (function () {
        document.open();
        if('${document.domain}') {
          document.domain='${document.domain}';
        }
        document.write('${iframeHTML}');
        document.close();
        window.parent.postMessage('complete','${document.domain ? location.origin : '*'}');
      })()
      )`,
                scrolling: 'no'
            },
            classes: ['textbus-frame']
        });
    }
};
Layout = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [EditorController])
], Layout);
export { Layout };
//# sourceMappingURL=layout.js.map
import { ContextMenuAction, Parser, Renderer, TBSelection, KeymapAction, MarkdownGrammarInterceptor } from '../core/_api';
import { TBHistory } from '../history';
import { EditorController } from '../editor-controller';
import { UIControlPanel } from './plugins/control-panel.plugin';
import { ComponentInjectors } from '../component-injectors';
import { Layout } from './layout';
import { I18n } from '../i18n/i18n';
import { UIMessage } from './plugins/message.plugin';
export declare const isWindows: boolean;
export declare const isMac: boolean;
export interface PastePreHandleMiddleware {
    (previousDOMTree: HTMLElement): Promise<HTMLElement> | HTMLElement;
}
/**
 * 事件劫持类，用于分配用户鼠标和键盘操作后的逻辑
 */
export declare class Input {
    private context;
    private layout;
    private controlPanel;
    private i18n;
    private editorController;
    private componentInjectors;
    private renderer;
    private message;
    private parser;
    private selection;
    private history;
    get value(): string;
    get selectionStart(): number;
    set readonly(b: boolean);
    get readonly(): boolean;
    private _readonly;
    private pasteMiddlewares;
    private markdownMatchers;
    private input;
    private keymaps;
    readonly elementRef: HTMLDivElement;
    private cursor;
    private inputWrap;
    private timer;
    private set display(value);
    private get display();
    private _display;
    private flashing;
    private subs;
    private contextmenu;
    private customContextmenuActions;
    private prevComponent;
    constructor(context: Document, layout: Layout, controlPanel: UIControlPanel, i18n: I18n, editorController: EditorController, componentInjectors: ComponentInjectors, renderer: Renderer, message: UIMessage, parser: Parser, selection: TBSelection, history: TBHistory);
    /**
     * 添加粘贴预处理中间件
     * @param middleware
     */
    addPasteMiddleware(middleware: PastePreHandleMiddleware): void;
    /**
     * 增加上下文菜单
     */
    addContextMenus(actions: ContextMenuAction[]): void;
    /**
     * 注册 Markdown 语法支持
     */
    addMarkdownSupport(config: MarkdownGrammarInterceptor): void;
    /**
     * 添加快捷键
     * @param keymap
     */
    addKeymap(keymap: KeymapAction): void;
    destroy(): void;
    private updateStateBySelection;
    private updateCursorPosition;
    private init;
    private makeContextmenu;
    private initEvent;
    private bindDefaultKeymap;
    private dispatchInputEvent;
    private dispatchComponentPresetEvent;
    private dispatchInputReadyEvent;
    private handlePaste;
    private dispatchEvent;
    private paste;
    private cut;
    private copy;
    private show;
    private hide;
}

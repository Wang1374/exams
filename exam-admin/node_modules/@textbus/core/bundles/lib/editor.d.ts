import { Observable } from 'rxjs';
import { Injector } from '@tanbo/di';
import { VElementLiteral } from './core/_api';
import { EditorController } from './editor-controller';
import { EditorOptions } from './editor-options';
export interface OutputContent<T = any> {
    content: T;
    links: Array<{
        [key: string]: string;
    }>;
    styleSheets: string[];
    scripts: string[];
}
/**
 * TextBus 主类
 */
export declare class Editor {
    selector: string | HTMLElement;
    options: EditorOptions;
    /** 当 TextBus 可用时触发 */
    readonly onReady: Observable<void>;
    /** 当 TextBus 内容发生变化时触发 */
    readonly onChange: Observable<void>;
    /** 组件状态控制器 */
    readonly stateController: EditorController;
    /** 编辑器注入器，在编辑准备完成时可用 */
    injector: Injector;
    set readonly(b: boolean);
    get readonly(): boolean;
    set supportMarkdown(b: boolean);
    get supportMarkdown(): boolean;
    private readonly container;
    private componentAnnotations;
    private defaultPlugins;
    private readyState;
    private tasks;
    private layout;
    private readyEvent;
    private resizeObserver;
    private subs;
    private changeEvent;
    constructor(selector: string | HTMLElement, options?: EditorOptions);
    /**
     * 设置 TextBus 编辑器的内容。
     * @param html
     */
    setContents(html: string): Promise<void>;
    /**
     * 获取 TextBus 的内容。
     */
    getContents(): OutputContent<string>;
    /**
     * 获取 TextBus 内容的 JSON 字面量。
     */
    getJSONLiteral(): OutputContent<VElementLiteral>;
    /**
     * 销毁 TextBus 实例。
     */
    destroy(): void;
    private getOutputComponentMetadata;
    private getReferencedComponents;
    private init;
    private bootstrap;
    private setDocStyle;
    private run;
    private listen;
    private updateDocHeight;
    private findFocusNode;
    private static cssMin;
}

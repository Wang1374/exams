import { Observable } from 'rxjs';
import { TBRange } from './range';
import { Renderer } from './renderer';
import { Fragment } from './fragment';
import { AbstractComponent } from './component';
/**
 * TextBus 选区对象
 */
export declare class TBSelection {
    private context;
    private selectionChange;
    private renderer;
    /**
     * 选区范围个数。
     */
    get rangeCount(): number;
    /**
     * 所有选区范围集合。
     */
    get ranges(): TBRange[];
    /**
     * 所有选区的所属最近的公共 fragment。
     */
    get commonAncestorFragment(): Fragment;
    get commonAncestorComponent(): AbstractComponent;
    /**
     * 获取 Selection 的第一个 Range。
     */
    get firstRange(): TBRange;
    /**
     * 获取 Selection 的最后一个 Range。
     */
    get lastRange(): TBRange;
    /**
     * 当前 Selection 是否折叠。
     */
    get collapsed(): boolean;
    nativeSelection: Selection;
    onChange: Observable<any>;
    private _ranges;
    private selectionChangeEvent;
    private isChanged;
    private oldCursorPosition;
    private cleanOldCursorTimer;
    constructor(context: Document, selectionChange: Observable<any>, renderer: Renderer);
    /**
     * 通过 TBRange 复位原生选区。
     */
    restore(): void;
    toPrevious(): void;
    toNext(): void;
    toPreviousLine(): void;
    toNextLine(): void;
    /**
     * 清除所有的 Range。
     * @param syncNative
     */
    removeAllRanges(syncNative?: boolean): void;
    /**
     * 添加一个 Range。
     * @param range
     */
    addRange(range: TBRange): void;
    /**
     * 创建一个新的区域
     */
    createRange(): TBRange;
    /**
     * 克隆当前 Selection 的副本，并返回。
     */
    clone(): TBSelection;
    selectAll(): void;
    private getCommonComponent;
    private getCommonFragment;
    private findFocusNode;
    private moveCursor;
}

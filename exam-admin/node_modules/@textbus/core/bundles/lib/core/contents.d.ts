import { AbstractComponent } from './component';
/**
 * 用数组储存 Fragment 内容的类，数组元素类型为 AbstractComponent 或 string。
 * 并提供对内容进行添加，查找，复制等功能。
 */
export declare class Contents {
    /**
     * 当前内容的长度。
     */
    get length(): number;
    /**
     * 当前内容。
     */
    private elements;
    /**
     * 把新内容添加到 elements 末尾。
     * @param content 新内容
     */
    append(content: AbstractComponent | string): void;
    /**
     * 根据指定位置，切分出内容中的一部分。如果切分区间与数组中的字符串元素有部分交集，
     * 则只取出相交的部分，如果是与组件有交集，则取出整个组件。
     * @param startIndex
     * @param endIndex
     */
    slice(startIndex: number, endIndex?: number): Array<string | AbstractComponent>;
    /**
     * 查找一个节点在当前内容的中下标位置，如没有，则返回 -1。
     * @param element
     */
    indexOf(element: AbstractComponent): number;
    /**
     * 在指定下标插入新的文本或节点。
     * @param content
     * @param index 要插入的目标位置
     */
    insert(content: string | AbstractComponent, index: number): void;
    /**
     * 删除下标指定范围内的内容。
     * @param startIndex
     * @param endIndex
     */
    cut(startIndex: number, endIndex: number): Array<string | AbstractComponent>;
    /**
     * 通过下标获取文本或子节点。
     * @param index
     */
    getContentAtIndex(index: number): string | AbstractComponent;
    /**
     * 克隆当前内容，并返回一个完全一样的副本。
     */
    clone(): Contents;
}

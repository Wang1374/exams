import { Type } from '@tanbo/di';
import { BranchAbstractComponent, DivisionAbstractComponent, AbstractComponent, BackboneAbstractComponent } from './component';
import { BlockFormatter, InlineFormatter, InlineFormatParams, BlockFormatParams, FormatRange } from './formatter';
import { Marker } from './marker';
/**
 * 应用样式的可选参数。
 */
export interface ApplyFormatOptions {
    /** 是否作为最重要的样式，当为 true 时，新样式将会覆盖原有样式，当为 false 的时候，原有样式将会覆盖新样式 */
    important?: boolean;
    /** 是否将样式应用到子组件（Component）*/
    coverChild?: boolean;
}
export declare const parentComponentAccessToken: unique symbol;
/**
 * TextBus 抽象数据类
 */
export declare class Fragment extends Marker {
    [parentComponentAccessToken]: DivisionAbstractComponent | BranchAbstractComponent | BackboneAbstractComponent | null;
    get parentComponent(): DivisionAbstractComponent | BranchAbstractComponent<Fragment> | BackboneAbstractComponent<Fragment>;
    /**
     * fragment 内容的长度
     */
    get length(): number;
    private contents;
    private formatMap;
    private eventMap;
    constructor();
    /**
     * 用一个新的 fragment 覆盖当前 fragment。
     * @param source
     */
    from(source: Fragment): void;
    /**
     * 合并两个可编辑片段的内容数组。
     * @param fragment
     */
    concat(fragment: Fragment): void;
    /**
     * 将新内容添加到 fragment 末尾。
     * @param content
     * @param insertAdjacentInlineFormat
     */
    append(content: string | AbstractComponent, insertAdjacentInlineFormat?: boolean): void;
    /**
     * 根据下标切分出一段内容。
     * @param startIndex
     * @param endIndex
     */
    sliceContents(startIndex?: number, endIndex?: number): (string | AbstractComponent)[];
    /**
     * 插入新内容到指定组件前。
     * @param contents
     * @param ref
     */
    insertBefore(contents: AbstractComponent | string, ref: AbstractComponent): void;
    /**
     * 插入新内容到指定组件后。
     * @param contents
     * @param ref
     */
    insertAfter(contents: AbstractComponent | string, ref: AbstractComponent): void;
    /**
     * 插入新内容到指定位置。
     * @param contents
     * @param index
     */
    insert(contents: AbstractComponent | Fragment | string, index: number): void;
    /**
     * 克隆当前 fragment 的副本并返回。
     */
    clone(): Fragment;
    /**
     * 清除当前 fragment 的内容及格式。
     */
    clean(): void;
    /**
     * 通过下标获取文本或子节点。
     * @param index
     */
    getContentAtIndex(index: number): string | AbstractComponent;
    /**
     * 删除指定范围的内容及格式。
     * @param startIndex
     * @param endIndex
     */
    remove(startIndex: number, endIndex?: number): void;
    /**
     * 剪切指定范围的内容及格式，并返回一个新的 fragment。
     * @param startIndex
     * @param endIndex
     */
    cut(startIndex: number, endIndex?: number): Fragment;
    /**
     * 获取当前片段内所有的 Formatter。
     */
    getFormatKeys(): (InlineFormatter | BlockFormatter)[];
    /**
     * 通过 Formatter 获取所有的 FormatRange。
     * @param token
     */
    getFormatRanges(token: InlineFormatter | BlockFormatter): FormatRange[];
    /**
     * 查找一个组件在当前 fragment 的下标位置。
     * @param component
     */
    indexOf(component: AbstractComponent): number;
    /**
     * 给当前 fragment 应用一段新样式。
     * @param token       样式的 Formatter。
     * @param params      样式的配置参数。
     * @param options     应用样式的可选项。
     */
    apply(token: InlineFormatter, params: InlineFormatParams, options?: ApplyFormatOptions): void;
    apply(token: BlockFormatter, params: BlockFormatParams, options?: ApplyFormatOptions): void;
    /**
     * 根据 fragment，向上查找最近的某类组件实例。
     * @param context 指定组件的构造类。
     * @param filter  过滤函数，当查找到实例后，可在 filter 函数中作进一步判断，如果返回为 false，则继续向上查找。
     */
    getContext<T extends AbstractComponent>(context: Type<T>, filter?: (instance: T) => boolean): T;
    private insertFragment;
    private _insert;
    private _apply;
    private _append;
    private _clean;
    private gourdComponentInSelf;
}

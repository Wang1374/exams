import { Observable } from 'rxjs';
declare const parentNode: unique symbol;
/**
 * 虚拟 DOM 节点的字面量表示。
 */
export interface VElementLiteral {
    tagName: string;
    styles: {
        [key: string]: any;
    };
    attrs: {
        [key: string]: any;
    };
    classes: string[];
    childNodes: Array<VElementLiteral | string>;
}
/**
 * 虚拟文本节点。
 */
export declare class VTextNode {
    readonly textContent: string;
    [parentNode]: VElement | null;
    get parentNode(): VElement;
    constructor(textContent?: string);
    clone(): VTextNode;
}
export interface VElementListeners {
    [listenKey: string]: <T extends Event>(ev: T) => any;
}
export interface VElementRenderFn {
    (props: {
        [key: string]: any;
    }): VElement;
}
/**
 * 配置虚拟 DOM 节点的属性选项。
 */
export interface VElementOption {
    attrs?: {
        [key: string]: boolean | string | number;
    };
    styles?: {
        [key: string]: string | number;
    };
    classes?: string[];
    childNodes?: Array<VElement | VTextNode>;
    on?: VElementListeners;
}
export declare type VElementJSXChildNode = VElement | string | number | boolean;
/**
 * 虚拟 DOM 节点
 */
export declare class VElement {
    tagName: string;
    static createElement(tagName: string | VElementRenderFn, attrs: {
        [key: string]: any;
    }, ...children: VElementJSXChildNode[] | VElementJSXChildNode[][]): VElement;
    [parentNode]: VElement | null;
    readonly attrs: Map<string, string | number | boolean>;
    readonly styles: Map<string, string | number>;
    readonly classes: string[];
    get parentNode(): VElement;
    get childNodes(): (VTextNode | VElement)[];
    onDestroy: Observable<void>;
    private _childNodes;
    private listeners;
    private unbindFns;
    private destroyEvent;
    constructor(tagName: string, options?: VElementOption);
    clone(): VElement;
    /**
     * 在最后位置添加一个子节点。
     * @param newNodes
     */
    appendChild(...newNodes: Array<VElement | VTextNode>): void;
    removeChild(node: VTextNode | VElement): void;
    replaceChild(newNode: VElement | VTextNode, oldNode: VElement | VTextNode): void;
    /**
     * 把当前虚拟 DOM 节点转换为 JSON 字面量。
     */
    toJSON(): VElementLiteral;
    onRendered(nativeNode: HTMLElement): void;
    destroy(): void;
    private static mapToJSON;
}
export {};

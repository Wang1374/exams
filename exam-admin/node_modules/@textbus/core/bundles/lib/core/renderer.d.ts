import { Observable } from 'rxjs';
import { Fragment } from './fragment';
import { VElement, VTextNode } from './element';
import { AbstractComponent } from './component';
import { FormatRange, InlineFormatter } from './formatter';
export interface ElementPosition {
    startIndex: number;
    endIndex: number;
    fragment: Fragment;
}
export interface FormatConfig {
    token: InlineFormatter;
    params: FormatRange;
}
export declare class Renderer {
    private host;
    /**
     * 当渲染开始时调用
     */
    onRendingBefore: Observable<void>;
    /**
     * 当渲染完成时调用
     */
    onViewUpdated: Observable<void>;
    private rendingEvent;
    private viewUpdateEvent;
    private vDomPositionMapping;
    private fragmentVDomMapping;
    private fragmentContentContainerMapping;
    private rendererVNodeMap;
    private NVMappingTable;
    private componentVDomCacheMap;
    private oldVDom;
    constructor(host: HTMLElement);
    /**
     * 渲染一个组件到指定的 DOM 容器内
     * @param component 要渲染的组件
     */
    render<T extends AbstractComponent>(component: T): VElement;
    /**
     * 获取 DOM 节点在 fragment 中的位置。
     * @param node
     */
    getPositionByNode(node: Node): ElementPosition;
    /**
     * 获取虚拟 DOM 节点在 fragment 中的位置。
     * @param vDom
     */
    getPositionByVDom(vDom: VElement | VTextNode): ElementPosition;
    /**
     * 根据虚拟 DOM 节点，查找直实 DOM 节点。
     * @param vDom
     */
    getNativeNodeByVDom(vDom: VElement | VTextNode): Node;
    /**
     * 根据真实 DOM 节点，查找虚拟 DOM 节点。
     * @param node
     */
    getVDomByNativeNode(node: Node): VElement | VTextNode;
    /**
     * 获取 fragment 对应的虚拟 DOM 节点。
     * @param fragment
     */
    getVElementByFragment(fragment: Fragment): VElement;
    /**
     * 获取组件的虚拟 DOM 的根节点
     * @param component
     */
    getComponentRootVNode(component: AbstractComponent): VElement;
    /**
     * 获取组件真实 DOM 的根节点
     * @param component
     */
    getComponentRootNativeNode(component: AbstractComponent): HTMLElement;
    private diffAndUpdate;
    private patch;
    private rendingFragment;
    private rendingComponent;
    private replaceSlotView;
    private rendingSlotFormats;
    private createVDOMByExtractContent;
    private rendingContents;
    private createElement;
    private createTextNode;
    private destroyVDom;
    /**
     * 将文本中的空白字符转成 unicode，用于在 DOM Text 节点中显示
     * @param s
     * @param target
     */
    static replaceEmpty(s: string, target: string): string;
    static calculatePriority(formats: FormatConfig[]): FormatConfig[];
    static formatSeparate(fragment: Fragment): {
        containerFormats: FormatConfig[];
        childFormats: FormatConfig[];
    };
}

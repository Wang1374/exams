var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var I18n_1;
import { Injectable } from '@tanbo/di';
/**
 * TextBus 国际化方案类
 */
let I18n = I18n_1 = class I18n {
    constructor(defaultConfig, customConfig) {
        this.defaultConfig = defaultConfig;
        this.customConfig = customConfig;
    }
    /**
     * 通过 path 获取 i18n 配置中的字段，如果没有自定义配置，则返回默认配置，
     * 如果获取到的值不为字符串，则返回空字符串
     * @param path 访问路径，支持如： a.b、a['b'].c、a[0] 等格式
     */
    get(path) {
        const tokens = this.parse(path);
        const customValue = this.getLabelByTokens(this.customConfig, tokens);
        if (typeof customValue === 'string') {
            return customValue;
        }
        const value = this.getLabelByTokens(this.defaultConfig, tokens);
        return typeof value === 'string' ? value : '';
    }
    /**
     * 通过 path 获取 i18n 配置中的上下文，并返回一个新的 i18n 实例
     * @param path 访问路径，支持如： a.b、a['b'].c、a[0] 等格式
     */
    getContext(path) {
        const tokens = this.parse(path);
        const customConfig = this.getLabelByTokens(this.customConfig, tokens) || {};
        const defaultConfig = this.getLabelByTokens(this.defaultConfig, tokens) || {};
        return new I18n_1(defaultConfig, customConfig);
    }
    /**
     * 用于连接模板字符串，模板字符串占位符为: {number}，其中 number 为占位符索引，
     * 如： template string {0} is {1}.
     * @param template 模板字符串
     * @param values 替换占位符的值，根据参数下标位置替换模板字符串的点位符
     */
    joinTemplate(template, ...values) {
        return template.replace(/{\d+}/g, str => {
            return values[str.replace(/{\s*|\s*}/g, '')] || str;
        });
    }
    parse(path) {
        return path.split(/[.\[\]'"]+/g).map(i => i.trim()).filter(i => i);
    }
    getLabelByTokens(config, tokens) {
        if (!config || tokens.length === 0) {
            return null;
        }
        let value = config;
        for (let i = 0; i < tokens.length; i++) {
            value = value[tokens[i]];
            if (typeof value === 'undefined') {
                return null;
            }
        }
        return value;
    }
};
I18n = I18n_1 = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [Object, Object])
], I18n);
export { I18n };
//# sourceMappingURL=i18n.js.map
import { Renderer, VTextNode } from './core/_api';
export class OutputTranslator {
}
/**
 * HTML 输出转换器
 */
export class HTMLOutputTranslator {
    constructor() {
        this.singleTagTest = new RegExp(`^(${HTMLOutputTranslator.singleTags.join('|')})$`, 'i');
    }
    transform(vDom) {
        return vDom.childNodes.map(child => {
            return this.vDomToHTMLString(child);
        }).join('');
    }
    vDomToHTMLString(vDom) {
        const xssFilter = HTMLOutputTranslator.simpleXSSFilter;
        if (vDom instanceof VTextNode) {
            return Renderer.replaceEmpty(xssFilter.text(vDom.textContent), '&nbsp;');
        }
        const styles = Array.from(vDom.styles.keys()).filter(key => {
            const v = vDom.styles.get(key);
            return !(v === undefined || v === null || v === '');
        }).map(key => {
            const k = key.replace(/(?=[A-Z])/g, '-').toLowerCase();
            return xssFilter.attrValue(`${k}:${vDom.styles.get(key)}`);
        }).join(';');
        const attrs = Array.from(vDom.attrs.keys()).filter(key => vDom.attrs.get(key) !== false).map(k => {
            const key = xssFilter.attrName(k);
            const value = vDom.attrs.get(k);
            return (value === true ? `${key}` : `${key}="${xssFilter.attrValue(`${value}`)}"`);
        });
        if (styles) {
            attrs.push(`style="${styles}"`);
        }
        if (vDom.classes && vDom.classes.length) {
            attrs.push(`class="${xssFilter.attrValue(vDom.classes.join(' '))}"`);
        }
        let attrStr = attrs.join(' ');
        attrStr = attrStr ? ' ' + attrStr : '';
        if (this.singleTagTest.test(vDom.tagName)) {
            return `<${vDom.tagName}${attrStr}>`;
        }
        const childHTML = vDom.childNodes.map(child => {
            return this.vDomToHTMLString(child);
        }).join('');
        return [
            `<${vDom.tagName}${attrStr}>`,
            childHTML,
            `</${vDom.tagName}>`
        ].join('');
    }
}
HTMLOutputTranslator.singleTags = 'br,img,hr'.split(',');
HTMLOutputTranslator.simpleXSSFilter = {
    text(text) {
        return text.replace(/[><&]/g, str => {
            return {
                '<': '&lt;',
                '>': '&gt;',
                '&': '&amp;'
            }[str];
        });
    },
    attrName(text) {
        return this.symbolTransfer(text.replace(/=/g, ''));
    },
    attrValue(text) {
        return this.symbolTransfer(text);
    },
    symbolTransfer(text) {
        return text.replace(/[><"'&/]/g, str => {
            return {
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#x27;',
                '&': '&amp;',
                '/': '&#x2F;'
            }[str];
        });
    }
};
//# sourceMappingURL=output-translator.js.map
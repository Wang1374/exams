var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable, InjectFlags, ReflectiveInjector } from '@tanbo/di';
import { ComponentSetter, Interceptor } from './core/_api';
/**
 * 组件 Injector 缓存器
 */
let ComponentInjectors = class ComponentInjectors {
    constructor() {
        this.injectors = new Map();
    }
    set(componentConstruct, injector) {
        this.injectors.set(componentConstruct, injector);
    }
    get(componentConstruct) {
        return this.injectors.get(componentConstruct) || new ReflectiveInjector(null, []);
    }
    destroy() {
        this.injectors.forEach(injector => {
            var _a, _b, _c, _d;
            (_b = (_a = injector.get(Interceptor, null, InjectFlags.Self)) === null || _a === void 0 ? void 0 : _a.onDestroy) === null || _b === void 0 ? void 0 : _b.call(_a);
            (_d = (_c = injector.get(ComponentSetter, null, InjectFlags.Self)) === null || _c === void 0 ? void 0 : _c.onDestroy) === null || _d === void 0 ? void 0 : _d.call(_c);
        });
    }
};
ComponentInjectors = __decorate([
    Injectable()
], ComponentInjectors);
export { ComponentInjectors };
//# sourceMappingURL=component-injectors.js.map
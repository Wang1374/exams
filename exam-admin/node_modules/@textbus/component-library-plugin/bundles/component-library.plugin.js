var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ComponentLibraryPlugin_1;
import { fromEvent, Observable } from 'rxjs';
import { Inject, Injectable, InjectionToken, AbstractComponent, BackboneAbstractComponent, BranchAbstractComponent, DivisionAbstractComponent, LeafAbstractComponent, TBSelection, BrComponent, UIDialog, EditorController, FileUploader, createElement, createTextNode, Tab, Layout, I18n } from '@textbus/core';
export class LibSwitch {
    constructor(callback, i18n) {
        this.callback = callback;
        this.i18n = i18n;
        this.btn = createElement('button', {
            attrs: {
                type: 'button',
                title: this.i18n.get('plugins.componentStage.expandOrNarrowLib'),
            },
            classes: ['textbus-status-bar-btn'],
            children: [
                createElement('span', {
                    classes: ['textbus-icon-components']
                }),
                createTextNode(this.i18n.get('plugins.componentStage.switchText'))
            ]
        });
        this.elementRef = createElement('div', {
            classes: ['textbus-lib-switch'],
            children: [
                this.btn
            ]
        });
        this._expand = false;
        this.subs = [];
        this.subs.push(fromEvent(this.elementRef, 'click').subscribe(() => {
            this.expand = !this.expand;
        }));
    }
    set expand(b) {
        this._expand = b;
        this.callback(b);
        if (b) {
            this.elementRef.classList.add('textbus-status-bar-btn-active');
        }
        else {
            this.elementRef.classList.remove('textbus-status-bar-btn-active');
        }
    }
    get expand() {
        return this._expand;
    }
    onDestroy() {
        this.subs.forEach(s => s.unsubscribe());
    }
}
export const COMPONENT_CREATORS = new InjectionToken('COMPONENT_CREATORS');
let ComponentLibraryPlugin = ComponentLibraryPlugin_1 = class ComponentLibraryPlugin {
    constructor(creators, i18n, editorController, fileUploader, dialogManager, selection, layout) {
        this.creators = creators;
        this.i18n = i18n;
        this.editorController = editorController;
        this.fileUploader = fileUploader;
        this.dialogManager = dialogManager;
        this.selection = selection;
        this.layout = layout;
        this.switch = new LibSwitch((b) => {
            this.expand = b;
        }, this.i18n);
        this._expand = false;
        this.subs = [];
    }
    set expand(b) {
        this._expand = b;
        b ?
            this.elementRef.classList.add('textbus-component-stage-expand') :
            this.elementRef.classList.remove('textbus-component-stage-expand');
    }
    setup() {
        const categories = this.classify(this.creators || []);
        const tab = new Tab();
        tab.show(categories.map(item => {
            const view = createElement('div', {
                classes: ['textbus-component-stage-list']
            });
            item.libs.forEach(i => view.appendChild(this.addExample(i)));
            return {
                label: item.categoryName,
                view
            };
        }));
        this.elementRef = createElement('div', {
            classes: ['textbus-component-stage'],
            children: [
                tab.elementRef
            ]
        });
        this.layout.rightContainer.appendChild(this.elementRef);
        this.layout.bottomBar.appendChild(this.switch.elementRef);
        this.subs.push(this.editorController.onStateChange.subscribe(state => {
            this.switch.btn.disabled = state.readonly || state.sourcecodeMode;
        }));
    }
    onDestroy() {
        this.subs.forEach(i => i.unsubscribe());
        this.switch.onDestroy();
    }
    classify(libs) {
        const categories = new Map();
        libs.forEach(item => {
            const category = typeof item.category === 'function' ? item.category(this.i18n) : item.category;
            const categoryName = category || this.i18n.get('plugins.componentStage.defaultCategoryName');
            if (!categories.has(categoryName)) {
                categories.set(categoryName, []);
            }
            const list = categories.get(categoryName);
            list.push(item);
        });
        return Array.from(categories).map(value => {
            return {
                categoryName: value[0],
                libs: value[1]
            };
        });
    }
    insertComponent(component) {
        if (this.editorController.readonly || !this.selection.rangeCount) {
            return;
        }
        const firstRange = this.selection.firstRange;
        const startFragment = firstRange.startFragment;
        const parentComponent = startFragment.parentComponent;
        if (component instanceof LeafAbstractComponent && !component.block) {
            startFragment.insert(component, firstRange.endIndex);
        }
        else {
            if (parentComponent instanceof DivisionAbstractComponent) {
                const parentFragment = parentComponent.parentFragment;
                if (!parentFragment) {
                    startFragment.insert(component, firstRange.startIndex);
                    return;
                }
                const firstContent = startFragment.getContentAtIndex(0);
                parentFragment.insertAfter(component, parentComponent);
                if (!firstContent || startFragment.length === 1 && firstContent instanceof BrComponent) {
                    const index = parentFragment.indexOf(parentComponent);
                    parentFragment.cut(index, index + 1);
                }
            }
            else if (parentComponent instanceof BranchAbstractComponent &&
                startFragment.length === 1 &&
                startFragment.getContentAtIndex(0) instanceof BrComponent) {
                startFragment.clean();
                startFragment.append(component);
            }
            else {
                startFragment.insert(component, firstRange.endIndex);
            }
        }
        let position;
        if (component instanceof DivisionAbstractComponent) {
            position = firstRange.findFirstPosition(component.slot);
        }
        else if (component instanceof BranchAbstractComponent) {
            position = firstRange.findFirstPosition(component.slots[0]);
        }
        else if (component instanceof BackboneAbstractComponent) {
            position = firstRange.findFirstPosition(component.getSlotAtIndex(0));
        }
        else {
            position = {
                fragment: component.parentFragment,
                index: component.parentFragment.indexOf(component)
            };
        }
        firstRange.setStart(position.fragment, position.index);
        firstRange.collapse();
        // this.selection.removeAllRanges(true);
    }
    addExample(example) {
        const name = typeof example.name === 'function' ? example.name(this.i18n) : example.name;
        const { wrapper, card } = ComponentLibraryPlugin_1.createViewer(example.example, name);
        card.addEventListener('click', () => {
            if (this.editorController.readonly || this.editorController.sourceCodeMode) {
                return;
            }
            const t = example.factory(this.dialogManager, this.fileUploader, this.i18n);
            if (t instanceof AbstractComponent) {
                this.insertComponent(t);
            }
            else if (t instanceof Promise) {
                t.then(instance => {
                    this.insertComponent(instance);
                });
            }
            else if (t instanceof Observable) {
                const sub = t.subscribe(instance => {
                    this.insertComponent(instance);
                    sub.unsubscribe();
                });
            }
        });
        return wrapper;
    }
    static createViewer(content, name) {
        const wrapper = document.createElement('div');
        wrapper.classList.add('textbus-component-example-item');
        const card = document.createElement('div');
        card.classList.add('textbus-component-example');
        const exampleContent = document.createElement('div');
        exampleContent.classList.add('textbus-component-example-content');
        if (typeof content === 'string') {
            exampleContent.innerHTML = content;
        }
        else if (content instanceof HTMLElement) {
            exampleContent.appendChild(content);
        }
        card.appendChild(exampleContent);
        const mask = document.createElement('div');
        mask.classList.add('textbus-component-example-mask');
        card.appendChild(mask);
        wrapper.appendChild(card);
        const nameWrapper = document.createElement('div');
        nameWrapper.classList.add('textbus-component-example-name');
        nameWrapper.innerText = name || '';
        wrapper.appendChild(nameWrapper);
        return {
            wrapper,
            card
        };
    }
};
ComponentLibraryPlugin = ComponentLibraryPlugin_1 = __decorate([
    Injectable(),
    __param(0, Inject(COMPONENT_CREATORS)),
    __metadata("design:paramtypes", [Array, I18n,
        EditorController,
        FileUploader,
        UIDialog,
        TBSelection,
        Layout])
], ComponentLibraryPlugin);
export { ComponentLibraryPlugin };
//# sourceMappingURL=component-library.plugin.js.map
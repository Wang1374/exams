import { Observable } from 'rxjs';
import { InjectionToken, AbstractComponent, TBSelection, UIDialog, EditorController, FileUploader, TBPlugin, Layout, I18n, I18nString } from '@textbus/core';
export interface ComponentCreator {
    example: string | HTMLElement;
    name: I18nString;
    category?: I18nString;
    factory(dialog: UIDialog, delegate: FileUploader, i18n: I18n): AbstractComponent | Promise<AbstractComponent> | Observable<AbstractComponent>;
}
export declare class LibSwitch {
    private callback;
    private i18n;
    btn: HTMLButtonElement;
    elementRef: HTMLElement;
    set expand(b: boolean);
    get expand(): boolean;
    private _expand;
    private subs;
    constructor(callback: (b: boolean) => void, i18n: I18n);
    onDestroy(): void;
}
export declare const COMPONENT_CREATORS: InjectionToken<ComponentCreator[]>;
export declare class ComponentLibraryPlugin implements TBPlugin {
    private creators;
    private i18n;
    private editorController;
    private fileUploader;
    private dialogManager;
    private selection;
    private layout;
    switch: LibSwitch;
    private elementRef;
    private set expand(value);
    private _expand;
    private subs;
    constructor(creators: ComponentCreator[], i18n: I18n, editorController: EditorController, fileUploader: FileUploader, dialogManager: UIDialog, selection: TBSelection, layout: Layout);
    setup(): void;
    onDestroy(): void;
    private classify;
    private insertComponent;
    private addExample;
    private static createViewer;
}

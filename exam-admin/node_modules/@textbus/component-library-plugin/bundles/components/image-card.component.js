var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ImageCardComponent_1;
import { VElement, BackboneAbstractComponent, Fragment, BrComponent, Component, Interceptor, TBSelection, Injectable } from '@textbus/core';
import { BlockComponent, ImageComponent } from '@textbus/components';
const svg = '<svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg"><g><rect fill="#555" height="100%" width="100%"/></g><g><text font-family="Helvetica, Arial, sans-serif" font-size="24" y="50%" x="50%" text-anchor="middle" dominant-baseline="middle" stroke-width="0" stroke="#000" fill="#000000">Image</text></g></svg>';
const defaultImageSrc = 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(svg);
class ImageCardComponentLoader {
    match(element) {
        return element.nodeName.toLowerCase() === 'tb-image-card';
    }
    read(element) {
        const imageWrapper = new Fragment();
        const desc = new Fragment();
        const component = new ImageCardComponent({
            imgFragment: imageWrapper,
            descFragment: desc
        });
        return {
            component: component,
            slotsMap: [{
                    from: element.children[0],
                    toSlot: imageWrapper
                }, {
                    from: element.children[1],
                    toSlot: desc
                }]
        };
    }
}
let ImageCardComponentInterceptor = class ImageCardComponentInterceptor {
    constructor(selection) {
        this.selection = selection;
    }
    onInput(event) {
        if (this.selection.commonAncestorFragment === event.instance.imgFragment) {
            event.stopPropagation();
        }
    }
    onPaste(event) {
        if (this.selection.commonAncestorFragment === event.instance.imgFragment) {
            event.stopPropagation();
        }
    }
    onDelete(event) {
        const { commonAncestorFragment, firstRange } = this.selection;
        if (commonAncestorFragment === event.instance.imgFragment) {
            event.stopPropagation();
        }
        else if (commonAncestorFragment === event.instance.descFragment && firstRange.startIndex === 0) {
            event.stopPropagation();
        }
    }
    onEnter(event) {
        const { firstRange, commonAncestorFragment } = this.selection;
        if (commonAncestorFragment === event.instance.descFragment) {
            const parentFragment = event.instance.parentFragment;
            const p = new BlockComponent('p');
            p.slot.append(new BrComponent());
            parentFragment.insertAfter(p, event.instance);
            firstRange.setStart(p.slot, 0);
            firstRange.collapse();
        }
        event.stopPropagation();
    }
};
ImageCardComponentInterceptor = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [TBSelection])
], ImageCardComponentInterceptor);
let ImageCardComponent = ImageCardComponent_1 = class ImageCardComponent extends BackboneAbstractComponent {
    constructor(options) {
        super('tb-image-card');
        this.block = false;
        this.imgFragment = options.imgFragment;
        this.descFragment = options.descFragment;
        this.push(this.imgFragment);
        this.push(this.descFragment);
    }
    canDelete(deletedSlot) {
        return deletedSlot === this.imgFragment;
    }
    slotRender(slot, isOutputMode, slotRendererFn) {
        let imgContainer;
        let descContainer;
        switch (slot) {
            case this.imgFragment:
                imgContainer = VElement.createElement("div", null);
                return slotRendererFn(slot, imgContainer);
            case this.descFragment:
                descContainer = VElement.createElement("p", null);
                return slotRendererFn(slot, descContainer);
        }
    }
    render(isOutputMode, slotRendererFn) {
        const card = VElement.createElement("tb-image-card", null);
        card.appendChild(slotRendererFn(this.imgFragment));
        card.appendChild(slotRendererFn(this.descFragment));
        return card;
    }
    clone() {
        return new ImageCardComponent_1({
            imgFragment: this.imgFragment.clone(),
            descFragment: this.descFragment.clone()
        });
    }
};
ImageCardComponent = ImageCardComponent_1 = __decorate([
    Component({
        loader: new ImageCardComponentLoader(),
        providers: [{
                provide: Interceptor,
                useClass: ImageCardComponentInterceptor
            }],
        styles: [
            `
tb-image-card {
  display: block;
  margin-top: 10px;
  margin-bottom: 20px;
  box-shadow: 1px 2px 3px rgba(0, 0, 0, .1);
  border-radius: 3px;
  overflow: hidden;
}
tb-image-card > div > img {
  width: 100%;
  display: block;
  min-height: 40px;
}
tb-image-card > p {
  margin: 0;
  text-align: center;
  font-size: 15px;
  color: #aaa;
  height: 24px;
  line-height: 24px;
  padding: 6px 20px;
  box-sizing: content-box;
}
`
        ]
    }),
    __metadata("design:paramtypes", [Object])
], ImageCardComponent);
export { ImageCardComponent };
export const imageCardComponentExample = {
    name: i18n => i18n.get('components.imageCardComponent.creator.name'),
    category: 'TextBus',
    example: `<img src="data:image/svg+xml;charset=UTF-8,${encodeURIComponent('<svg width="100" height="70" xmlns="http://www.w3.org/2000/svg"><defs><linearGradient id="bg" x1="0%" y1="0%" x2="0%" y2="100%"><stop offset="0%" stop-color="#f90"/><stop offset="100%" stop-color="#fff"/></linearGradient></defs><g><rect fill="url(#bg)" height="50" width="100%"/></g><g><path fill="#f00" opacity="0.2" d="M81.25 28.125c0 5.178-4.197 9.375-9.375 9.375s-9.375-4.197-9.375-9.375 4.197-9.375 9.375-9.375 9.375 4.197 9.375 9.375z"></path><path fill="#0e0" opacity="0.3" d="M87.5 81.25h-75v-12.5l21.875-37.5 25 31.25h6.25l21.875-18.75z"></path></g><g><rect fill="#fff" height="20" width="100%" y="50"></rect></g><g><text font-family="Helvetica, Arial, sans-serif" font-size="12" y="63" x="50%" text-anchor="middle" stroke-width="0" stroke="#000" fill="#000000">描述文字</text></g></svg>')}" alt="">`,
    factory() {
        const imgFragment = new Fragment();
        imgFragment.append(new ImageComponent(defaultImageSrc));
        const descFragment = new Fragment();
        descFragment.append('图片描述');
        return new ImageCardComponent({
            imgFragment,
            descFragment
        });
    }
};
//# sourceMappingURL=image-card.component.js.map
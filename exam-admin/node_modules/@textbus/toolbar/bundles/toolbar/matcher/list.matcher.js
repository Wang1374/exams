import { ListComponent } from '@textbus/components';
import { HighlightState } from '../help';
import { rangeContentInComponent } from './utils/range-content-in-component';
export class ListMatcher {
    constructor(tagName, excludeComponents = []) {
        this.tagName = tagName;
        this.excludeComponents = excludeComponents;
    }
    queryState(selection) {
        var _a;
        if (selection.rangeCount === 0) {
            return {
                srcStates: [],
                matchData: null,
                state: HighlightState.Normal
            };
        }
        for (const range of selection.ranges) {
            const isDisable = rangeContentInComponent(range, this.excludeComponents);
            if (isDisable) {
                return {
                    state: HighlightState.Disabled,
                    matchData: null,
                    srcStates: []
                };
            }
        }
        const states = selection.ranges.map(range => {
            if (range.commonAncestorComponent instanceof ListComponent &&
                range.commonAncestorComponent.tagName === this.tagName) {
                return {
                    srcData: range.commonAncestorComponent,
                    fromRange: range,
                    state: HighlightState.Highlight
                };
            }
            const context = range.commonAncestorFragment.getContext(ListComponent);
            return {
                state: context && context.tagName === this.tagName ? HighlightState.Highlight : HighlightState.Normal,
                srcData: context,
                fromRange: range
            };
        });
        let isHighlight = true;
        for (const item of states) {
            if (item.state === HighlightState.Normal) {
                isHighlight = false;
                break;
            }
        }
        return {
            state: isHighlight ? HighlightState.Highlight : HighlightState.Normal,
            srcStates: states,
            matchData: (_a = states[0]) === null || _a === void 0 ? void 0 : _a.srcData,
        };
    }
}
//# sourceMappingURL=list.matcher.js.map
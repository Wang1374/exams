import { PreComponent } from '@textbus/components';
import { HighlightState } from '../help';
export class CodeMatcher {
    queryState(selection) {
        if (selection.rangeCount === 0) {
            return {
                srcStates: [],
                matchData: null,
                state: HighlightState.Normal
            };
        }
        const contextComponents = selection.ranges.map(range => {
            var _a;
            if (range.commonAncestorComponent instanceof PreComponent) {
                return range.commonAncestorComponent;
            }
            return (_a = range.commonAncestorFragment) === null || _a === void 0 ? void 0 : _a.getContext(PreComponent);
        });
        return {
            state: contextComponents.map(i => !!i).includes(false) ? HighlightState.Normal : HighlightState.Highlight,
            srcStates: [],
            matchData: contextComponents[0]
        };
    }
}
//# sourceMappingURL=code.matcher.js.map
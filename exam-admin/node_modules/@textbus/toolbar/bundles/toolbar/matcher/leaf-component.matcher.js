import { HighlightState } from '../help';
import { rangeContentInComponent } from './utils/range-content-in-component';
export class LeafComponentMatcher {
    constructor(componentConstructor, tagName, excludeComponents = []) {
        this.componentConstructor = componentConstructor;
        this.tagName = tagName;
        this.excludeComponents = excludeComponents;
    }
    queryState(selection) {
        var _a, _b;
        if (selection.rangeCount === 0) {
            return {
                srcStates: [],
                matchData: null,
                state: HighlightState.Normal
            };
        }
        for (const range of selection.ranges) {
            const isDisable = rangeContentInComponent(range, this.excludeComponents);
            if (isDisable) {
                return {
                    state: HighlightState.Disabled,
                    matchData: null,
                    srcStates: []
                };
            }
        }
        const states = selection.ranges.map(range => {
            if (range.startFragment === range.endFragment) {
                if (range.endIndex - range.startIndex === 1) {
                    const state = this.match(range, range.startIndex);
                    if (state) {
                        return state;
                    }
                }
            }
            return {
                state: HighlightState.Normal,
                fromRange: range,
                srcData: null
            };
        });
        for (const s of states) {
            if (s.state !== HighlightState.Highlight) {
                return {
                    state: HighlightState.Normal,
                    srcStates: states,
                    matchData: (_a = states[0]) === null || _a === void 0 ? void 0 : _a.srcData
                };
            }
        }
        return {
            state: HighlightState.Highlight,
            srcStates: states,
            matchData: (_b = states[0]) === null || _b === void 0 ? void 0 : _b.srcData
        };
    }
    match(range, startIndex) {
        const content = range.startFragment.getContentAtIndex(startIndex);
        if (content instanceof this.componentConstructor && content.tagName === this.tagName) {
            return {
                srcData: content,
                fromRange: range,
                state: HighlightState.Highlight
            };
        }
        return null;
    }
}
//# sourceMappingURL=leaf-component.matcher.js.map
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { fromEvent } from 'rxjs';
import { auditTime, distinctUntilChanged, map } from 'rxjs/operators';
import { Inject, Injectable, InjectionToken, Injector, Optional, Layout, I18n, UIDialog, FileUploader, TBSelection, TBHistory, Input, EditorController, createElement } from '@textbus/core';
import { createKeymapHTML } from './_utils/uikit';
import { HighlightState } from './help';
export const TOOLS = new InjectionToken('TOOLS');
let Toolbar = class Toolbar {
    constructor(tools, layout, editorController, i18n, input, injector, history, dialog, selection, fileUploader) {
        this.tools = tools;
        this.layout = layout;
        this.editorController = editorController;
        this.i18n = i18n;
        this.input = input;
        this.injector = injector;
        this.history = history;
        this.dialog = dialog;
        this.selection = selection;
        this.fileUploader = fileUploader;
        this.toolInstances = [];
        this.factories = [];
        this.subs = [];
        this.tools = this.tools || [];
    }
    setup() {
        this.elementRef = createElement('div', {
            classes: ['textbus-toolbar'],
            children: [
                this.toolWrapper = createElement('div', {
                    classes: ['textbus-toolbar-wrapper']
                }),
                this.keymapPrompt = createElement('div', {
                    classes: ['textbus-toolbar-keymap-prompt']
                })
            ]
        });
        this.tools.forEach(factory => {
            const group = document.createElement('span');
            group.classList.add('textbus-toolbar-group');
            this.toolWrapper.appendChild(group);
            if (Array.isArray(factory)) {
                factory.forEach(t => {
                    this.factories.push(t);
                    group.appendChild(this.initTool(t));
                });
                return;
            }
            group.appendChild(this.initTool(factory));
        });
        this.subs.push(this.editorController.onStateChange.pipe(map(status => {
            return status.sourcecodeMode || status.readonly;
        }), distinctUntilChanged()).subscribe(b => {
            this.toolInstances.forEach(t => {
                t.refreshState({
                    matchData: null,
                    srcStates: [],
                    state: b ? HighlightState.Disabled : HighlightState.Normal
                });
            });
        }), this.selection.onChange.pipe(auditTime(100)).subscribe(() => {
            const event = document.createEvent('Event');
            event.initEvent('click', true, true);
            this.elementRef.dispatchEvent(event);
            this.updateHandlerState();
        }), this.history.onChange.subscribe(() => {
            this.updateHandlerState();
        }), fromEvent(this.elementRef, 'mouseover').subscribe(ev => {
            const keymap = this.findNeedShowKeymapHandler(ev.target);
            if (keymap) {
                try {
                    const config = JSON.parse(keymap);
                    this.keymapPrompt.innerHTML = '';
                    this.keymapPrompt.append(...createKeymapHTML(config));
                    this.keymapPrompt.classList.add('textbus-toolbar-keymap-prompt-show');
                    return;
                }
                catch (e) {
                    //
                }
            }
            this.keymapPrompt.classList.remove('textbus-toolbar-keymap-prompt-show');
        }));
        this.layout.topBar.appendChild(this.elementRef);
    }
    onDestroy() {
        this.factories.forEach(factory => {
            var _a;
            (_a = factory.onDestroy) === null || _a === void 0 ? void 0 : _a.call(factory);
        });
        this.toolInstances.forEach(map => {
            var _a, _b, _c, _d;
            (_b = (_a = map.matcher) === null || _a === void 0 ? void 0 : _a.onDestroy) === null || _b === void 0 ? void 0 : _b.call(_a);
            (_d = (_c = map.commander) === null || _c === void 0 ? void 0 : _c.onDestroy) === null || _d === void 0 ? void 0 : _d.call(_c);
        });
        this.subs.forEach(i => i.unsubscribe());
    }
    initTool(factory) {
        const selection = this.selection;
        return factory.create({
            i18n: this.i18n,
            dialog: this.dialog,
            limitElement: this.elementRef,
            uploader: this.fileUploader
        }, tool => {
            var _a, _b, _c, _d;
            this.toolInstances.push(tool);
            (_b = (_a = tool.matcher) === null || _a === void 0 ? void 0 : _a.setup) === null || _b === void 0 ? void 0 : _b.call(_a, this.injector);
            (_d = (_c = tool.commander) === null || _c === void 0 ? void 0 : _c.setup) === null || _d === void 0 ? void 0 : _d.call(_c, this.injector);
            (tool.keymaps || []).forEach(k => {
                this.input.addKeymap(k);
            });
            if (tool.commander) {
                this.subs.push(tool.onAction.subscribe(value => {
                    const state = tool.matcher ?
                        tool.matcher.queryState(selection).state :
                        HighlightState.Normal;
                    if (state === HighlightState.Disabled) {
                        return;
                    }
                    const overlap = state === HighlightState.Highlight;
                    tool.commander.command({
                        selection,
                        overlap,
                    }, value);
                    this.updateHandlerState();
                    if (tool.commander.recordHistory) {
                        this.history.record();
                    }
                }));
            }
        });
    }
    updateHandlerState() {
        if (!this.selection.commonAncestorFragment) {
            return;
        }
        this.toolInstances.forEach(tool => {
            var _a;
            let s;
            if (typeof tool.refreshState === 'function') {
                s = ((_a = tool.matcher) === null || _a === void 0 ? void 0 : _a.queryState(this.selection)) || {
                    srcStates: [],
                    matchData: null,
                    state: HighlightState.Normal
                };
                tool.refreshState(s);
            }
        });
    }
    findNeedShowKeymapHandler(el) {
        if (el === this.elementRef) {
            return;
        }
        if (el.dataset.keymap) {
            return el.dataset.keymap;
        }
        return this.findNeedShowKeymapHandler(el.parentNode);
    }
};
Toolbar = __decorate([
    Injectable(),
    __param(0, Optional()),
    __param(0, Inject(TOOLS)),
    __metadata("design:paramtypes", [Array,
        Layout,
        EditorController,
        I18n,
        Input,
        Injector,
        TBHistory,
        UIDialog,
        TBSelection,
        FileUploader])
], Toolbar);
export { Toolbar };
//# sourceMappingURL=toolbar.js.map
import { merge, Subject } from 'rxjs';
import { UIKit } from '../_utils/uikit';
import { HighlightState } from '../help';
export class DropdownTool {
    constructor(config) {
        this.config = config;
        this.subs = [];
    }
    create(params, addTool) {
        const { i18n, limitElement } = params;
        const config = Object.assign(Object.assign({}, this.config), { label: typeof this.config.label === 'function' ? this.config.label(i18n) : this.config.label, tooltip: typeof this.config.tooltip === 'function' ? this.config.tooltip(i18n) : this.config.tooltip });
        const viewer = config.viewFactory(i18n);
        const dropdown = UIKit.dropdown({
            button: Object.assign({}, config),
            menu: viewer.elementRef,
            stickyElement: limitElement
        });
        let prevValue = null;
        this.subs.push(viewer.onComplete.subscribe(value => {
            prevValue = value;
            dropdown.hide();
        }));
        dropdown.button.elementRef.dataset.keymap = JSON.stringify(config.keymap);
        const subject = new Subject();
        const obs = subject.asObservable();
        addTool({
            keymaps: config.keymap ? [{
                    keymap: config.keymap,
                    action() {
                        if (!dropdown.disabled) {
                            subject.next(prevValue);
                        }
                    }
                }] : [],
            onAction: merge(viewer.onComplete, obs),
            commander: config.commanderFactory(),
            matcher: config.matcher,
            refreshState(selectionMatchState) {
                viewer.update(selectionMatchState.matchData);
                switch (selectionMatchState.state) {
                    case HighlightState.Highlight:
                        dropdown.disabled = false;
                        dropdown.highlight = true;
                        break;
                    case HighlightState.Normal:
                        dropdown.disabled = false;
                        dropdown.highlight = false;
                        break;
                    case HighlightState.Disabled:
                        dropdown.disabled = true;
                        dropdown.highlight = false;
                        break;
                }
            }
        });
        return dropdown.elementRef;
    }
    onDestroy() {
        this.subs.filter(i => i.unsubscribe());
    }
}
//# sourceMappingURL=dropdown-tool.js.map
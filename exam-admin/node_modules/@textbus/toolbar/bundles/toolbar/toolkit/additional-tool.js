import { fromEvent } from 'rxjs';
import { createElement } from '@textbus/core';
import { UIKit } from '../_utils/uikit';
import { HighlightState } from '../help';
export class AdditionalTool {
    constructor(config) {
        this.config = config;
        this.subs = [];
    }
    create(params, addTool) {
        const { i18n, limitElement } = params;
        const config = Object.assign(Object.assign({}, this.config), { label: typeof this.config.label === 'function' ? this.config.label(i18n) : this.config.label, tooltip: typeof this.config.tooltip === 'function' ? this.config.tooltip(i18n) : this.config.tooltip });
        let contentWrapper;
        let closeBtn;
        const elementRef = createElement('div', {
            classes: ['textbus-toolbar-additional-worktable'],
            children: [
                contentWrapper = createElement('div', {
                    classes: ['textbus-toolbar-additional-worktable-content']
                }),
                createElement('div', {
                    classes: ['textbus-toolbar-additional-worktable-close'],
                    children: [
                        closeBtn = createElement('button', {
                            attrs: {
                                type: 'button'
                            },
                            props: {
                                innerHTML: '&times;'
                            }
                        })
                    ]
                })
            ]
        });
        const content = config.viewFactory(i18n);
        this.subs.push(fromEvent(closeBtn, 'click').subscribe(() => {
            button.disabled = false;
            button.highlight = false;
            content.destroy();
            limitElement.removeChild(elementRef);
        }));
        const button = UIKit.button({
            label: config.label,
            classes: config.classes,
            tooltip: config.tooltip,
            iconClasses: config.iconClasses,
            onChecked() {
                button.highlight = true;
                contentWrapper.appendChild(content.elementRef);
                limitElement.appendChild(elementRef);
            }
        });
        addTool({
            onAction: content.onAction,
            keymaps: config.keymap ? [{
                    keymap: config.keymap,
                    action() {
                        if (!button.disabled) {
                            button.highlight = true;
                            contentWrapper.appendChild(content.elementRef);
                            limitElement.appendChild(elementRef);
                        }
                    }
                }] : [],
            commander: config.commanderFactory(),
            matcher: config.matcher,
            refreshState(selectionMatchState) {
                switch (selectionMatchState.state) {
                    case HighlightState.Highlight:
                        button.disabled = false;
                        button.highlight = true;
                        break;
                    case HighlightState.Normal:
                        button.disabled = false;
                        button.highlight = false;
                        break;
                    case HighlightState.Disabled:
                        button.disabled = true;
                        button.highlight = false;
                        break;
                }
            }
        });
        return button.elementRef;
    }
    onDestroy() {
        this.subs.forEach(i => i.unsubscribe());
    }
}
//# sourceMappingURL=additional-tool.js.map
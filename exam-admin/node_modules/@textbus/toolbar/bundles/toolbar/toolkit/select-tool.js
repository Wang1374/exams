import { Subject } from 'rxjs';
import { UIKit } from '../_utils/uikit';
import { HighlightState } from '../help';
export class SelectTool {
    constructor(config) {
        this.config = config;
    }
    create(params, addTool) {
        const { i18n, limitElement } = params;
        const map = new Map();
        const config = Object.assign(Object.assign({}, this.config), { tooltip: typeof this.config.tooltip === 'function' ? this.config.tooltip(i18n) : this.config.tooltip, options: this.config.options.map(option => {
                const o = Object.assign(Object.assign({}, option), { label: typeof option.label === 'function' ? option.label(i18n) : option.label });
                map.set(option, o);
                return o;
            }) });
        const subject = new Subject();
        const obs = subject.asObservable();
        const dropdown = UIKit.select(Object.assign(Object.assign({}, config), { stickyElement: limitElement, onSelected: (value) => {
                subject.next(value);
            } }));
        addTool({
            commander: config.commanderFactory(),
            onAction: obs,
            keymaps: config.options.filter(i => i.keymap).map(i => {
                return {
                    keymap: i.keymap,
                    action() {
                        if (!dropdown.disabled) {
                            subject.next(i.value);
                        }
                    }
                };
            }),
            matcher: config.matcher,
            refreshState(selectionMatchState) {
                var _a;
                if (selectionMatchState.matchData) {
                    const option = (_a = config.matchOption) === null || _a === void 0 ? void 0 : _a.call(config, selectionMatchState.matchData);
                    if (option) {
                        const o = map.get(option);
                        dropdown.button.label.innerText = o.label || o.value;
                        dropdown.disabled = false;
                        dropdown.highlight = true;
                        return;
                    }
                }
                dropdown.highlight = false;
                dropdown.disabled = selectionMatchState.state === HighlightState.Disabled;
                let defaultOption;
                for (const op of config.options) {
                    if (op.default) {
                        defaultOption = op;
                        break;
                    }
                }
                if (defaultOption) {
                    dropdown.button.label.innerText = defaultOption.label || defaultOption.value;
                }
            }
        });
        return dropdown.elementRef;
    }
}
//# sourceMappingURL=select-tool.js.map
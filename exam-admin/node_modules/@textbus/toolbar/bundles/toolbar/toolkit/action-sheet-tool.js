import { Subject } from 'rxjs';
import { UIKit } from '../_utils/uikit';
import { HighlightState } from '../help';
export class ActionSheetTool {
    constructor(config) {
        this.config = config;
    }
    create(params, addTool) {
        const { i18n, limitElement } = params;
        const config = Object.assign(Object.assign({}, this.config), { label: typeof this.config.label === 'function' ? this.config.label(i18n) : this.config.label, tooltip: typeof this.config.tooltip === 'function' ? this.config.tooltip(i18n) : this.config.tooltip, actions: this.config.actions.map(action => {
                return Object.assign(Object.assign({}, action), { label: typeof action.label === 'function' ? action.label(i18n) : action.label });
            }) });
        const subject = new Subject();
        const obs = subject.asObservable();
        const viewer = UIKit.actions(Object.assign(Object.assign({}, config), { stickyElement: limitElement, items: config.actions.map(v => {
                return Object.assign(Object.assign({}, v), { onChecked() {
                        subject.next(v.value);
                    } });
            }) }));
        addTool({
            commander: config.commanderFactory(),
            matcher: config.matcher,
            keymaps: config.actions.filter(i => i.keymap).map(action => {
                return {
                    keymap: action.keymap,
                    action() {
                        if (!viewer.disabled) {
                            subject.next(action.value);
                        }
                    }
                };
            }),
            onAction: obs,
            refreshState(selectionMatchState) {
                switch (selectionMatchState.state) {
                    case HighlightState.Highlight:
                        viewer.disabled = false;
                        viewer.highlight = true;
                        break;
                    case HighlightState.Normal:
                        viewer.disabled = false;
                        viewer.highlight = false;
                        break;
                    case HighlightState.Disabled:
                        viewer.disabled = true;
                        viewer.highlight = false;
                        break;
                }
            }
        });
        return viewer.elementRef;
    }
}
//# sourceMappingURL=action-sheet-tool.js.map
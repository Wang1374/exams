import { Subject } from 'rxjs';
import { UIKit } from '../_utils/uikit';
import { HighlightState } from '../help';
export class ButtonTool {
    constructor(config) {
        this.config = config;
    }
    create(params, addTool) {
        const { i18n } = params;
        const config = Object.assign(Object.assign({}, this.config), { label: typeof this.config.label === 'function' ? this.config.label(i18n) : this.config.label, tooltip: typeof this.config.tooltip === 'function' ? this.config.tooltip(i18n) : this.config.tooltip });
        const subject = new Subject();
        const obs = subject.asObservable();
        const btn = UIKit.button(Object.assign(Object.assign({}, config), { onChecked: () => {
                subject.next();
            } }));
        btn.elementRef.dataset.keymap = JSON.stringify(config.keymap);
        addTool({
            commander: config.commanderFactory(),
            keymaps: config.keymap ? [{
                    keymap: config.keymap,
                    action() {
                        if (!btn.disabled) {
                            subject.next();
                        }
                    }
                }] : [],
            onAction: obs,
            matcher: config.matcher,
            refreshState(selectionMatchState) {
                switch (selectionMatchState.state) {
                    case HighlightState.Highlight:
                        btn.highlight = true;
                        break;
                    case HighlightState.Normal:
                        btn.disabled = false;
                        btn.highlight = false;
                        break;
                    case HighlightState.Disabled:
                        btn.disabled = true;
                        break;
                }
            }
        });
        return btn.elementRef;
    }
}
//# sourceMappingURL=button-tool.js.map
import { merge, Subject } from 'rxjs';
import { UIKit } from '../_utils/uikit';
import { HighlightState } from '../help';
export class FormTool {
    constructor(config) {
        this.config = config;
    }
    create(params, addTool) {
        const { i18n, dialog, uploader } = params;
        const config = Object.assign(Object.assign({}, this.config), { label: typeof this.config.label === 'function' ? this.config.label(i18n) : this.config.label, tooltip: typeof this.config.tooltip === 'function' ? this.config.tooltip(i18n) : this.config.tooltip });
        const viewer = config.viewFactory(i18n);
        let prevValue = null;
        const subject = new Subject();
        const obs = subject.asObservable();
        const button = UIKit.button(Object.assign(Object.assign({}, config), { onChecked: () => {
                var _a;
                dialog.dialog(viewer.elementRef);
                const s = viewer.onComplete.subscribe(value => {
                    prevValue = value;
                    dialog.close();
                    s.unsubscribe();
                });
                const b = (_a = viewer.onClose) === null || _a === void 0 ? void 0 : _a.subscribe(() => {
                    dialog.close();
                    s.unsubscribe();
                    b.unsubscribe();
                });
            } }));
        if (typeof viewer.setFileUploader === 'function') {
            viewer.setFileUploader(uploader);
        }
        addTool({
            keymaps: config.keymap ? [{
                    keymap: config.keymap,
                    action() {
                        if (!button.disabled) {
                            subject.next(prevValue);
                        }
                    }
                }] : [],
            onAction: merge(viewer.onComplete, obs),
            commander: config.commanderFactory(),
            matcher: config.matcher,
            refreshState(selectionMatchState) {
                viewer.update(selectionMatchState.matchData);
                switch (selectionMatchState.state) {
                    case HighlightState.Highlight:
                        button.disabled = false;
                        button.highlight = true;
                        break;
                    case HighlightState.Normal:
                        button.disabled = false;
                        button.highlight = false;
                        break;
                    case HighlightState.Disabled:
                        button.disabled = true;
                        button.highlight = false;
                        break;
                }
            }
        });
        return button.elementRef;
    }
}
//# sourceMappingURL=form-tool.js.map
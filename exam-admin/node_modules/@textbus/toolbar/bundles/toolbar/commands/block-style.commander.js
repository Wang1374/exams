import { BranchAbstractComponent, DivisionAbstractComponent, FormatData, FormatEffect, BackboneAbstractComponent } from '@textbus/core';
export class BlockStyleCommander {
    constructor(name, formatter) {
        this.name = name;
        this.formatter = formatter;
        this.recordHistory = true;
    }
    command(context, value) {
        context.selection.ranges.forEach(range => {
            range.getSelectedScope().forEach(item => {
                const fragments = [];
                if (item.fragment === range.startFragment || item.fragment === range.endFragment) {
                    fragments.push(item.fragment);
                }
                else {
                    if (item.startIndex === 0 && item.endIndex === item.fragment.length) {
                        fragments.push(item.fragment);
                    }
                    else {
                        const ff = [];
                        let flag = false;
                        item.fragment.sliceContents(item.startIndex, item.endIndex).forEach(content => {
                            if (content instanceof DivisionAbstractComponent) {
                                fragments.push(content.slot);
                            }
                            else if (content instanceof BranchAbstractComponent) {
                                fragments.push(...content.slots);
                            }
                            else if (content instanceof BackboneAbstractComponent) {
                                fragments.push(...Array.from(content));
                            }
                            else {
                                flag = true;
                            }
                        });
                        if (flag) {
                            fragments.push(item.fragment);
                        }
                        else {
                            fragments.push(...ff);
                        }
                    }
                }
                fragments.forEach(slot => {
                    slot.apply(this.formatter, {
                        effect: value ? FormatEffect.Valid : FormatEffect.Invalid,
                        formatData: new FormatData({
                            styles: {
                                [this.name]: value
                            }
                        })
                    });
                });
            });
        });
    }
}
//# sourceMappingURL=block-style.commander.js.map
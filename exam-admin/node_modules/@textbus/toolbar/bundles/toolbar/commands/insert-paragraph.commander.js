import { BrComponent, RootComponent } from '@textbus/core';
import { BlockComponent } from '@textbus/components';
export class InsertParagraphCommander {
    constructor(insertBefore) {
        this.insertBefore = insertBefore;
        this.recordHistory = true;
    }
    setup(injector) {
        this.rootComponent = injector.get(RootComponent);
    }
    command(c) {
        const { selection } = c;
        if (selection.rangeCount === 0) {
            this.recordHistory = false;
            return;
        }
        const firstRange = selection.firstRange;
        this.recordHistory = true;
        let component = selection.commonAncestorComponent;
        if (component === this.rootComponent) {
            const commonAncestorFragmentScope = firstRange.getCommonAncestorFragmentScope();
            component = this.insertBefore ?
                commonAncestorFragmentScope.startChildComponent :
                commonAncestorFragmentScope.endChildComponent;
        }
        const parentFragment = component.parentFragment;
        const p = new BlockComponent('p');
        p.slot.append(new BrComponent());
        this.insertBefore ? parentFragment.insertBefore(p, component) : parentFragment.insertAfter(p, component);
        selection.removeAllRanges();
        firstRange.setStart(p.slot, 0);
        firstRange.collapse();
        selection.addRange(firstRange);
    }
}
//# sourceMappingURL=insert-paragraph.commander.js.map
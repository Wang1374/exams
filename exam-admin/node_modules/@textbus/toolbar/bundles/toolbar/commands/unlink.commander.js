import { FormatEffect } from '@textbus/core';
import { linkFormatter } from '@textbus/formatters';
export class UnlinkCommander {
    constructor() {
        this.recordHistory = true;
    }
    command(context) {
        context.selection.ranges.forEach(range => {
            if (range.collapsed) {
                range.startFragment.getFormatRanges(linkFormatter).filter(f => {
                    return f.startIndex < range.startIndex && f.endIndex >= range.endIndex;
                }).forEach(f => {
                    range.startFragment.apply(linkFormatter, Object.assign(Object.assign({}, f), { effect: FormatEffect.Invalid }));
                });
            }
            else {
                range.getSelectedScope().forEach(item => {
                    item.fragment.apply(linkFormatter, {
                        effect: FormatEffect.Invalid,
                        formatData: null,
                        startIndex: item.startIndex,
                        endIndex: item.endIndex
                    });
                });
            }
        });
    }
}
//# sourceMappingURL=unlink.commander.js.map
import { Injector, FormatData, FormatEffect, FormatRendingContext, InlineFormatter, VElement } from '@textbus/core';
import { CommandContext, Commander } from '../commander';
export interface FindAndReplaceRule {
    findValue: string;
    next: boolean;
    replaceValue: string;
    replace: boolean;
    replaceAll: boolean;
}
declare class FindFormatter extends InlineFormatter {
    constructor();
    match(): FormatEffect;
    read(): FormatData;
    render(context: FormatRendingContext, existingElement?: VElement): VElement;
}
export declare const findFormatter: FindFormatter;
export declare class FindCommander implements Commander<FindAndReplaceRule> {
    recordHistory: boolean;
    private findValue;
    private positions;
    private positionIndex;
    private scrollContainer;
    private selection;
    private rootComponent;
    private rootFragment;
    private subs;
    setup(injector: Injector): void;
    command(context: CommandContext, rule: FindAndReplaceRule): void;
    onDestroy(): void;
    private onRenderingBefore;
    private onViewUpdated;
    private apply;
    private find;
}
export {};

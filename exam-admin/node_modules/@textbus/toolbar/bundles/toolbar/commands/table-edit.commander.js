import { TableComponent } from '@textbus/components';
export var TableEditActions;
(function (TableEditActions) {
    TableEditActions[TableEditActions["AddColumnToLeft"] = 0] = "AddColumnToLeft";
    TableEditActions[TableEditActions["AddColumnToRight"] = 1] = "AddColumnToRight";
    TableEditActions[TableEditActions["AddRowToTop"] = 2] = "AddRowToTop";
    TableEditActions[TableEditActions["AddRowToBottom"] = 3] = "AddRowToBottom";
    TableEditActions[TableEditActions["MergeCells"] = 4] = "MergeCells";
    TableEditActions[TableEditActions["SplitCells"] = 5] = "SplitCells";
    TableEditActions[TableEditActions["DeleteTopRow"] = 6] = "DeleteTopRow";
    TableEditActions[TableEditActions["DeleteBottomRow"] = 7] = "DeleteBottomRow";
    TableEditActions[TableEditActions["DeleteLeftColumn"] = 8] = "DeleteLeftColumn";
    TableEditActions[TableEditActions["DeleteRightColumn"] = 9] = "DeleteRightColumn";
})(TableEditActions || (TableEditActions = {}));
export class TableEditCommander {
    constructor() {
        this.recordHistory = true;
    }
    command(c, actionType) {
        const { selection } = c;
        const context = selection.firstRange.startFragment.getContext(TableComponent);
        this.recordHistory = true;
        if (!context) {
            this.recordHistory = false;
            return;
        }
        switch (actionType) {
            case TableEditActions.AddColumnToLeft:
                context.addColumnToLeft(selection);
                break;
            case TableEditActions.AddColumnToRight:
                context.addColumnToRight(selection);
                break;
            case TableEditActions.AddRowToTop:
                context.addRowToTop(selection);
                break;
            case TableEditActions.AddRowToBottom:
                context.addRowToBottom(selection);
                break;
            case TableEditActions.MergeCells:
                context.mergeCells(selection);
                break;
            case TableEditActions.SplitCells:
                context.splitCells(selection);
                break;
            case TableEditActions.DeleteTopRow:
                context.deleteTopRow(selection);
                break;
            case TableEditActions.DeleteBottomRow:
                context.deleteBottomRow(selection);
                break;
            case TableEditActions.DeleteLeftColumn:
                context.deleteLeftColumn(selection);
                break;
            case TableEditActions.DeleteRightColumn:
                context.deleteRightColumn(selection);
                break;
        }
    }
}
//# sourceMappingURL=table-edit.commander.js.map
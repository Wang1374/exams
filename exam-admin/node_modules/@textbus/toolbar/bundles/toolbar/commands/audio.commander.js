import { AudioComponent } from '@textbus/components';
export class AudioCommander {
    constructor() {
        this.recordHistory = true;
    }
    command(context, attrs) {
        context.selection.ranges.forEach(range => {
            if (range.collapsed) {
                if (context.overlap) {
                    const component = range.commonAncestorFragment.getContentAtIndex(range.startIndex);
                    if (component instanceof AudioComponent) {
                        component.src = attrs.get('src');
                        component.autoplay = attrs.get('autoplay');
                        component.controls = attrs.get('controls');
                    }
                }
                else {
                    range.commonAncestorFragment.insert(new AudioComponent(attrs.get('src'), !!attrs.get('autoplay'), !!attrs.get('controls')), range.startIndex);
                }
            }
            else {
                range.getSelectedScope().forEach(scope => {
                    scope.fragment.sliceContents(scope.startIndex, scope.endIndex).forEach(component => {
                        if (component instanceof AudioComponent) {
                            component.src = attrs.get('src');
                            component.autoplay = attrs.get('autoplay');
                            component.controls = attrs.get('controls');
                        }
                    });
                });
            }
        });
    }
}
//# sourceMappingURL=audio.commander.js.map
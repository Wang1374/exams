import { FormatData, FormatEffect } from '@textbus/core';
export class InlineMarginCommander {
    constructor(inlineFormatter) {
        this.inlineFormatter = inlineFormatter;
        this.recordHistory = true;
    }
    command(context, params) {
        context.selection.ranges.forEach(range => {
            if (range.collapsed) {
                const commonAncestorFragment = range.commonAncestorFragment;
                commonAncestorFragment.getFormatKeys().forEach(token => {
                    if (token !== this.inlineFormatter) {
                        return;
                    }
                    commonAncestorFragment.getFormatRanges(token).forEach(format => {
                        if (range.startIndex > format.startIndex && range.endIndex <= format.endIndex) {
                            if (Array.from(params.values()).filter(i => i).length) {
                                params.forEach((value, key) => {
                                    format.formatData.styles.set(key, value);
                                });
                                commonAncestorFragment.markAsDirtied();
                            }
                            else {
                                commonAncestorFragment.apply(token, Object.assign(Object.assign({}, format), { effect: FormatEffect.Invalid }));
                            }
                        }
                    });
                });
                return;
            }
            range.getSelectedScope().forEach(scope => {
                scope.fragment.apply(this.inlineFormatter, {
                    effect: Array.from(params.values()).filter(i => i).length ? FormatEffect.Valid : FormatEffect.Invalid,
                    startIndex: scope.startIndex,
                    endIndex: scope.endIndex,
                    formatData: new FormatData({
                        styles: {
                            marginTop: params.get('marginTop'),
                            marginRight: params.get('marginRight'),
                            marginBottom: params.get('marginBottom'),
                            marginLeft: params.get('marginLeft'),
                        }
                    })
                });
            });
        });
    }
}
//# sourceMappingURL=inline-margin.commander.js.map
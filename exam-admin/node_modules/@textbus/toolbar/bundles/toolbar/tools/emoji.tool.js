import { Subject } from 'rxjs';
import { EmojiCommander } from '../commands/emoji.commander';
import { DropdownTool } from '../toolkit/_api';
class Emoji {
    constructor() {
        this.elementRef = document.createElement('div');
        this.checkEvent = new Subject();
        this.onComplete = this.checkEvent.asObservable();
        this.elementRef.classList.add('textbus-toolbar-emoji-menu');
        const emoji = [];
        for (let i = 0x1F600; i <= 0x1F64F; i++) {
            emoji.push(i.toString(16).toUpperCase());
        }
        const fragment = document.createDocumentFragment();
        const buttons = emoji.map(s => {
            const button = document.createElement('button');
            button.type = 'button';
            button.classList.add('textbus-toolbar-emoji-menu-item');
            button.innerHTML = `&#x${s};`;
            fragment.appendChild(button);
            return button;
        });
        this.elementRef.addEventListener('click', (ev) => {
            const target = ev.target;
            for (const btn of buttons) {
                if (target === btn) {
                    this.checkEvent.next(btn.innerHTML);
                    break;
                }
            }
        });
        this.elementRef.appendChild(fragment);
    }
    update() {
        //
    }
}
export const emojiToolConfig = {
    iconClasses: ['textbus-icon-emoji'],
    tooltip: i18n => i18n.get('plugins.toolbar.emojiTool.tooltip'),
    commanderFactory() {
        return new EmojiCommander();
    },
    viewFactory() {
        return new Emoji();
    },
};
export const emojiTool = new DropdownTool(emojiToolConfig);
//# sourceMappingURL=emoji.tool.js.map
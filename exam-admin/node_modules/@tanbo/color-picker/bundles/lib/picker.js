var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { hex2Hsl, hex2Hsv, hex2Rgb, hsl2Hex, hsl2Hsv, hsl2Rgb, hsv2Hex, hsv2Hsl, hsv2Rgb, normalizeHex, parseCss, rgb2Hex, rgb2Hsl, rgb2Hsv } from '@tanbo/color';
import { template } from './template';
var Picker = /** @class */ (function () {
    function Picker(selector, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.host = document.createElement('div');
        this.empty = false;
        this.resetAlpha = true;
        this.writing = false;
        this.recentColorOptions = [];
        if (typeof selector === 'string') {
            this.container = document.querySelector(selector);
        }
        else {
            this.container = selector;
        }
        this.host.classList.add('tanbo-color-picker');
        this.host.innerHTML = template(options.btnText || '确定');
        this.container.appendChild(this.host);
        this.valueViewer = this.host.querySelector('.tanbo-color-picker-value-color');
        this.palette = this.host.querySelector('.tanbo-color-picker-palette');
        this.palettePoint = this.host.querySelector('.tanbo-color-picker-palette-point');
        this.hueBar = this.host.querySelector('.tanbo-color-picker-hue-bar');
        this.huePoint = this.host.querySelector('.tanbo-color-picker-hue-pointer');
        this.checkBtn = this.host.querySelector('.tanbo-color-picker-btn');
        this.alphaBar = this.host.querySelector('.tanbo-color-picker-viewer-alpha-bar');
        this.alphaValue = this.host.querySelector('.tanbo-color-picker-viewer-alpha-value');
        this.alphaPoint = this.host.querySelector('.tanbo-color-picker-viewer-alpha-pointer');
        this.inputsWrap = this.host.querySelector('.tanbo-color-picker-inputs');
        this.hslInputs = Array.from(this.host.querySelectorAll('.tanbo-color-picker-hsl input'));
        this.rgbInputs = Array.from(this.host.querySelectorAll('.tanbo-color-picker-rgb input'));
        this.hexInput = this.host.querySelector('.tanbo-color-picker-hex input');
        this.colorOptionGroup = this.host.querySelector('.tanbo-color-picker-swatches');
        if (Array.isArray(options.colors)) {
            options.colors.forEach(function (item) { return _this.addRecentColor(item.toLowerCase()); });
        }
        this.hex = options.value || '#f00';
        this.bindingEvents();
    }
    Object.defineProperty(Picker.prototype, "hex", {
        get: function () {
            return this.empty ? null : this._hex;
        },
        set: function (color) {
            var c = color ? normalizeHex(color) : null;
            if (c) {
                this.empty = false;
                this._hex = c;
                this._hsl = hex2Hsl(c);
                this._rgb = hex2Rgb(c);
                this._hsv = hex2Hsv(c);
                this._rgba = __assign(__assign({}, this._rgb), { a: this.resetAlpha ? 1 : this._rgba.a });
            }
            else {
                this.empty = true;
            }
            this.resetAlpha = true;
            this.render();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Picker.prototype, "hsl", {
        get: function () {
            return this.empty ? null : this._hsl;
        },
        set: function (color) {
            if (!color || typeof color.h !== 'number' || typeof color.s !== 'number' || typeof color.l !== 'number') {
                this.empty = true;
            }
            else {
                this.empty = false;
                this._hsl = color;
                this._hex = hsl2Hex(color);
                this._hsv = hsl2Hsv(color);
                this._rgb = hsl2Rgb(color);
                this._rgba = __assign(__assign({}, this._rgb), { a: this.resetAlpha ? 1 : this._rgba.a });
            }
            this.resetAlpha = true;
            this.render();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Picker.prototype, "rgb", {
        get: function () {
            return this.empty ? null : this._rgb;
        },
        set: function (color) {
            if (!color || typeof color.r !== 'number' || typeof color.g !== 'number' || typeof color.b !== 'number') {
                this.empty = true;
            }
            else {
                this.empty = false;
                this._rgb = color;
                this._rgba = __assign(__assign({}, color), { a: this.resetAlpha ? 1 : this._rgba.a });
                this._hsl = rgb2Hsl(color);
                this._hex = rgb2Hex(color);
                this._hsv = rgb2Hsv(color);
            }
            this.resetAlpha = true;
            this.render();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Picker.prototype, "rgba", {
        get: function () {
            return this.empty ? null : this._rgba;
        },
        set: function (color) {
            if (!color ||
                typeof color.r !== 'number' ||
                typeof color.g !== 'number' ||
                typeof color.b !== 'number' ||
                typeof color.a !== 'number') {
                this.empty = true;
            }
            else {
                this.empty = false;
                this._rgba = color;
                this._hsl = rgb2Hsl(color);
                this._hex = rgb2Hex(color);
                this._hsv = rgb2Hsv(color);
            }
            this.render();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Picker.prototype, "hsv", {
        get: function () {
            return this.empty ? null : this._hsv;
        },
        set: function (color) {
            if (!color || typeof color.h !== 'number' || typeof color.s !== 'number' || typeof color.v !== 'number') {
                this.empty = true;
            }
            else {
                this.empty = false;
                this._hsv = color;
                this._hex = hsv2Hex(color);
                this._hsl = hsv2Hsl(color);
                this._rgb = hsv2Rgb(color);
                this._rgba = __assign(__assign({}, this._rgb), { a: this.resetAlpha ? 1 : this._rgba.a });
            }
            this.resetAlpha = true;
            this.render();
        },
        enumerable: false,
        configurable: true
    });
    Picker.prototype.addRecentColor = function (color) {
        var _this = this;
        this.recentColorOptions = this.recentColorOptions.filter(function (item) {
            return item !== color;
        });
        this.recentColorOptions.unshift(color);
        if (this.recentColorOptions.length >= 12) {
            this.recentColorOptions.length = 12;
            this.recentColorOptions[11] = '';
        }
        else {
            this.recentColorOptions.push('');
        }
        this.recentColorOptions.forEach(function (color, index) {
            var el = _this.colorOptionGroup.children[index].children[0];
            el.style.background = color;
            el.setAttribute('data-color', color);
        });
    };
    Picker.prototype.render = function () {
        if (!this.writing) {
            if (this.empty) {
                this.hslInputs[0].value = '';
                this.hslInputs[1].value = '';
                this.hslInputs[2].value = '';
                this.rgbInputs[0].value = '';
                this.rgbInputs[1].value = '';
                this.rgbInputs[2].value = '';
                this.hexInput.value = '';
                this.alphaValue.innerText = '1';
            }
            else {
                this.hslInputs[0].value = this.hsl.h + '';
                this.hslInputs[1].value = this.hsl.s + '';
                this.hslInputs[2].value = this.hsl.l + '';
                this.rgbInputs[0].value = this.rgb.r + '';
                this.rgbInputs[1].value = this.rgb.g + '';
                this.rgbInputs[2].value = this.rgb.b + '';
                this.hexInput.value = this.hex;
                this.alphaValue.innerText = Number(this.rgba.a.toFixed(2)) + '';
            }
        }
        this.palette.classList.remove('tanbo-color-picker-palette-empty');
        this.palette.style.background = "linear-gradient(to right, #fff, hsl(" + this._hsv.h + ", 100%, 50%))";
        this.palettePoint.style.left = "calc(" + this._hsv.s + "% - 6px)";
        this.palettePoint.style.top = "calc(" + (100 - this._hsv.v) + "% - 6px)";
        this.huePoint.style.top = "calc(" + this._hsv.h / 360 * 100 + "% - 4px)";
        if (this.empty) {
            this.palette.classList.add('tanbo-color-picker-palette-empty');
            this.palette.style.background = '';
            this.valueViewer.style.background = '';
            this.alphaBar.style.background = '';
            this.alphaPoint.style.left = '100%';
        }
        else {
            this.valueViewer.style.background = "rgba(" + this.rgba.r + ", " + this.rgba.g + ", " + this.rgba.b + ", " + this.rgba.a + ")";
            this.palette.classList.remove('tanbo-color-picker-palette-empty');
            this.palette.style.background = "linear-gradient(to right, #fff, hsl(" + this._hsv.h + ", 100%, 50%))";
            this.alphaBar.style.background = "linear-gradient(to right, transparent, " + this.hex + ")";
            this.alphaPoint.style.left = (this.rgba.a || 0) * 100 + '%';
        }
    };
    Picker.prototype.bindingEvents = function () {
        this.bindPaletteEvent();
        this.bindHueBarEvent();
        this.bindAlphaEvent();
        this.bindInputsEvent();
        this.bindSelectedEvent();
        this.bindColorOptionsEvent();
    };
    Picker.prototype.bindAlphaEvent = function () {
        var _this = this;
        var update = function (ev) {
            var position = _this.alphaBar.getBoundingClientRect();
            var offsetX = ev.clientX - position.left;
            offsetX = Math.max(0, offsetX);
            offsetX = Math.min(position.width, offsetX);
            _this.rgba = __assign(__assign({}, _this._rgba), { a: offsetX / position.width });
            _this.change();
        };
        var mouseDownFn = function (ev) {
            update(ev);
            document.addEventListener('mousemove', mouseMoveFn);
            document.addEventListener('mouseup', mouseUpFn);
        };
        var mouseMoveFn = function (ev) {
            update(ev);
        };
        var mouseUpFn = function () {
            document.removeEventListener('mousemove', mouseMoveFn);
            document.removeEventListener('mouseup', mouseUpFn);
        };
        this.alphaBar.addEventListener('mousedown', mouseDownFn);
    };
    Picker.prototype.bindPaletteEvent = function () {
        var _this = this;
        var update = function (ev) {
            var position = _this.palette.getBoundingClientRect();
            var offsetX = ev.clientX - position.left;
            var offsetY = ev.clientY - position.top;
            var s = offsetX / 130 * 100;
            var v = 100 - offsetY / 130 * 100;
            s = Math.max(0, s);
            s = Math.min(100, s);
            v = Math.max(0, v);
            v = Math.min(100, v);
            _this.resetAlpha = false;
            _this.hsv = {
                h: _this._hsv.h,
                s: s,
                v: v
            };
            _this.change();
        };
        var mouseDownFn = function (ev) {
            update(ev);
            document.addEventListener('mousemove', mouseMoveFn);
            document.addEventListener('mouseup', mouseUpFn);
        };
        var mouseMoveFn = function (ev) {
            update(ev);
        };
        var mouseUpFn = function () {
            document.removeEventListener('mousemove', mouseMoveFn);
            document.removeEventListener('mouseup', mouseUpFn);
        };
        this.palette.addEventListener('mousedown', mouseDownFn);
    };
    Picker.prototype.bindHueBarEvent = function () {
        var _this = this;
        var update = function (ev) {
            var position = _this.hueBar.getBoundingClientRect();
            var offsetY = ev.clientY - position.top;
            offsetY = Math.max(0, offsetY);
            offsetY = Math.min(100, offsetY);
            var h = 360 / 100 * offsetY;
            _this.resetAlpha = false;
            _this.hsv = {
                h: h,
                s: _this._hsv.s,
                v: _this._hsv.v
            };
            _this.change();
        };
        var mouseDownFn = function (ev) {
            update(ev);
            document.addEventListener('mousemove', mouseMoveFn);
            document.addEventListener('mouseup', mouseUpFn);
        };
        var mouseMoveFn = function (ev) {
            update(ev);
        };
        var mouseUpFn = function () {
            document.removeEventListener('mousemove', mouseMoveFn);
            document.removeEventListener('mouseup', mouseUpFn);
        };
        this.hueBar.addEventListener('mousedown', mouseDownFn);
    };
    Picker.prototype.bindInputsEvent = function () {
        var _this = this;
        var updateByHSL = function (h, s, l) {
            _this.hex = hsl2Hex({ h: h, s: s, l: l });
            _this.change();
        };
        var updateByRGB = function (r, g, b) {
            _this.hex = rgb2Hex({ r: r, g: g, b: b });
            _this.change();
        };
        this.inputsWrap.addEventListener('input', function (ev) {
            _this.writing = true;
            var el = ev.target;
            var model = el.getAttribute('data-model');
            if (el.type === 'number') {
                var min = +el.min;
                var max = +el.max;
                el.value = Math.max(el.value, min);
                el.value = Math.min(el.value, max);
            }
            var _a = _this.hsl, h = _a.h, s = _a.s, l = _a.l;
            var _b = _this.rgb, r = _b.r, g = _b.g, b = _b.b;
            switch (model) {
                case 'H':
                    updateByHSL(el.value, s, l);
                    break;
                case 'S':
                    updateByHSL(h, el.value, l);
                    break;
                case 'L':
                    updateByHSL(h, s, el.value);
                    break;
                case 'R':
                    updateByRGB(el.value, g, b);
                    break;
                case 'G':
                    updateByRGB(r, el.value, b);
                    break;
                case 'B':
                    updateByRGB(r, g, el.value);
                    break;
                case 'HEX':
                    if (/^#(([0-9a-f]){3}){1,2}$/i.test(el.value)) {
                        _this.hex = el.value;
                        _this.change();
                    }
                    break;
            }
            _this.writing = false;
        });
    };
    Picker.prototype.bindSelectedEvent = function () {
        var _this = this;
        this.checkBtn.addEventListener('click', function () {
            var rgba = _this.rgba;
            if (rgba && rgba.a !== 1) {
                var r = rgba.r, g = rgba.g, b = rgba.b, a = rgba.a;
                _this.addRecentColor("rgba(" + r + "," + g + "," + b + "," + a + ")");
            }
            else if (_this.hex) {
                _this.addRecentColor(_this.hex);
            }
            if (typeof _this.onSelected === 'function') {
                _this.onSelected(_this);
            }
        });
    };
    Picker.prototype.bindColorOptionsEvent = function () {
        var _this = this;
        this.colorOptionGroup.addEventListener('click', function (ev) {
            var e_1, _a;
            try {
                for (var _b = __values(_this.recentColorOptions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    var c = ev.target.getAttribute('data-color');
                    if (item === c) {
                        if (/^rgba/.test(c)) {
                            _this.rgba = parseCss(c);
                        }
                        else {
                            _this.hex = c;
                        }
                        _this.change();
                        return;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    };
    Picker.prototype.change = function () {
        if (typeof this.onChange === 'function') {
            this.onChange(this);
        }
    };
    return Picker;
}());
export { Picker };
//# sourceMappingURL=picker.js.map
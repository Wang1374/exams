import { makeParamDecorator, makePropertyDecorator } from './decorators';
import { ForwardRef } from './forward-ref';
import { THROW_IF_NOT_FOUND } from './null-injector';
/**
 * 构造函数参数装饰器，用于改变注入 token
 */
export const Inject = function InjectDecorator(token) {
    if (this instanceof Inject) {
        this.token = token;
    }
    else {
        return makeParamDecorator(Inject, new Inject(token));
    }
};
export const Self = function SelfDecorator() {
    if (!(this instanceof Self)) {
        return makeParamDecorator(Self, new Self());
    }
};
export const SkipSelf = function SkipSelfDecorator() {
    if (!(this instanceof SkipSelf)) {
        return makeParamDecorator(SkipSelf, new SkipSelf());
    }
};
export const Optional = function OptionalDecorator() {
    if (!(this instanceof Optional)) {
        return makeParamDecorator(Optional, new Optional());
    }
};
export const Prop = function PropDecorator(token, notFoundValue = THROW_IF_NOT_FOUND, flags) {
    if (!(this instanceof Prop)) {
        return makePropertyDecorator(Prop, function (instance, propertyName, injector) {
            instance[propertyName] = injector.get(token instanceof ForwardRef ? token.getRef() : token, notFoundValue, flags);
        });
    }
};

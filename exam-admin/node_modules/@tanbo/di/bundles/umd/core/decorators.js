(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./annotations"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAnnotations = exports.makeClassDecorator = exports.makeMethodDecorator = exports.makePropertyDecorator = exports.makeParamDecorator = void 0;
    var annotations_1 = require("./annotations");
    /**
     * 创建参数装饰器的工厂函数
     */
    function makeParamDecorator(token, metadata) {
        return function (target, propertyKey, parameterIndex) {
            var annotations = getAnnotations(target);
            annotations.pushParamMetadata(token, {
                propertyKey: propertyKey,
                parameterIndex: parameterIndex,
                metadata: metadata
            });
        };
    }
    exports.makeParamDecorator = makeParamDecorator;
    /**
     * 创建属性装饰器的工厂函数
     */
    function makePropertyDecorator(token, contextCallback) {
        return function (target, propertyKey) {
            var annotations = getAnnotations(target.constructor);
            annotations.pushPropMetadata(token, {
                propertyKey: propertyKey,
                contextCallback: contextCallback
            });
        };
    }
    exports.makePropertyDecorator = makePropertyDecorator;
    /**
     * 创建方法装饰器的工厂函数
     */
    function makeMethodDecorator(token) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        return function (target, methodName) {
            var annotations = getAnnotations(target.constructor);
            annotations.pushMethodMetadata(token, {
                methodName: methodName,
                params: params
            });
        };
    }
    exports.makeMethodDecorator = makeMethodDecorator;
    /**
     * 创建类装饰器的工厂函数
     */
    function makeClassDecorator(token, metadata) {
        return function (target) {
            var annotations = getAnnotations(target);
            annotations.setClassMetadata(token, {
                paramTypes: Reflect.getMetadata('design:paramtypes', target),
                metadata: metadata
            });
        };
    }
    exports.makeClassDecorator = makeClassDecorator;
    /**
     * 获取类注解的工具函数
     */
    function getAnnotations(target) {
        if (!target.hasOwnProperty('__annotaions__')) {
            var annotations_2 = new annotations_1.Annotations();
            Reflect.defineProperty(target, '__annotations__', {
                get: function () {
                    return annotations_2;
                }
            });
        }
        return target.__annotations__;
    }
    exports.getAnnotations = getAnnotations;
});

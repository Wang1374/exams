var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./injector", "./reflective-provider", "./metadata", "./utils/inject-error", "./forward-ref", "./injection-token", "./null-injector", "./injectable", "./decorators"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReflectiveInjector = void 0;
    var injector_1 = require("./injector");
    var reflective_provider_1 = require("./reflective-provider");
    var metadata_1 = require("./metadata");
    var inject_error_1 = require("./utils/inject-error");
    var forward_ref_1 = require("./forward-ref");
    var injection_token_1 = require("./injection-token");
    var null_injector_1 = require("./null-injector");
    var injectable_1 = require("./injectable");
    var decorators_1 = require("./decorators");
    var reflectiveInjectorErrorFn = inject_error_1.makeInjectError('ReflectiveInjectorError');
    var provideScopeError = inject_error_1.madeProvideScopeError('ReflectiveInjectorError');
    /**
     * 反射注入器
     */
    var ReflectiveInjector = /** @class */ (function (_super) {
        __extends(ReflectiveInjector, _super);
        function ReflectiveInjector(parentInjector, staticProviders, scope) {
            var _this = _super.call(this) || this;
            _this.parentInjector = parentInjector;
            _this.staticProviders = staticProviders;
            _this.scope = scope;
            _this.recordValues = new Map();
            _this.normalizedProviders = staticProviders.map(function (provide) {
                return reflective_provider_1.normalizeProvider(provide);
            });
            return _this;
        }
        /**
         * 用于获取当前注入器上下文内的实例、对象或数据
         * @param token 访问 token
         * @param notFoundValue 如未查找到的返回值
         * @param flags 查询规则
         */
        ReflectiveInjector.prototype.get = function (token, notFoundValue, flags) {
            var _a;
            if (notFoundValue === void 0) { notFoundValue = null_injector_1.THROW_IF_NOT_FOUND; }
            flags = flags || injector_1.InjectFlags.Default;
            if (flags === injector_1.InjectFlags.SkipSelf) {
                if (this.parentInjector) {
                    return this.parentInjector.get(token, notFoundValue);
                }
                if (notFoundValue !== null_injector_1.THROW_IF_NOT_FOUND) {
                    return notFoundValue;
                }
                throw reflectiveInjectorErrorFn(token);
            }
            if (this.recordValues.has(token)) {
                return this.recordValues.get(token);
            }
            for (var i = 0; i < this.normalizedProviders.length; i++) {
                var normalizedProvider = this.normalizedProviders[i];
                if (normalizedProvider.provide === token) {
                    return this.getValue(token, notFoundValue, normalizedProvider);
                }
            }
            if (!(token instanceof injection_token_1.InjectionToken)) {
                var scope = (_a = decorators_1.getAnnotations(token).getClassMetadata(injectable_1.Injectable)) === null || _a === void 0 ? void 0 : _a.metadata.provideIn;
                if (scope) {
                    var normalizedProvider = reflective_provider_1.normalizeProvider(token);
                    if (this.scope === scope) {
                        this.normalizedProviders.push(normalizedProvider);
                        return this.getValue(token, notFoundValue, normalizedProvider);
                    }
                    var parentInjector = this.parentInjector;
                    if (!parentInjector || parentInjector instanceof null_injector_1.NullInjector) {
                        if (normalizedProvider.scope === 'root') {
                            this.normalizedProviders.push(normalizedProvider);
                            return this.getValue(token, notFoundValue, normalizedProvider);
                        }
                        if (notFoundValue !== null_injector_1.THROW_IF_NOT_FOUND) {
                            return notFoundValue;
                        }
                        throw provideScopeError(normalizedProvider.scope);
                    }
                }
            }
            if (flags === injector_1.InjectFlags.Self) {
                if (notFoundValue === null_injector_1.THROW_IF_NOT_FOUND) {
                    throw reflectiveInjectorErrorFn(token);
                }
                return notFoundValue;
            }
            if (this.parentInjector) {
                return this.parentInjector.get(token, notFoundValue, flags === injector_1.InjectFlags.Optional ? injector_1.InjectFlags.Optional : injector_1.InjectFlags.Default);
            }
            if (notFoundValue === null_injector_1.THROW_IF_NOT_FOUND) {
                throw reflectiveInjectorErrorFn(token);
            }
            return notFoundValue;
        };
        ReflectiveInjector.prototype.getValue = function (token, notFoundValue, normalizedProvider) {
            var _this = this;
            if (notFoundValue === void 0) { notFoundValue = null_injector_1.THROW_IF_NOT_FOUND; }
            var generateFactory = normalizedProvider.generateFactory, deps = normalizedProvider.deps;
            var factory = generateFactory(this, function (token, value) {
                _this.recordValues.set(token, value);
            });
            var params = this.resolveDeps(deps || [], notFoundValue);
            var value = factory.apply(void 0, __spread(params));
            this.recordValues.set(token, value);
            return value;
        };
        /**
         * 解决并获取依赖参数
         * @param deps 依赖规则
         * @param notFoundValue 未查找到时的返回值
         * @private
         */
        ReflectiveInjector.prototype.resolveDeps = function (deps, notFoundValue) {
            var _this = this;
            return deps.map(function (dep) {
                var reflectiveValue;
                var tryValue = {};
                var injectToken = dep.injectKey instanceof forward_ref_1.ForwardRef ? dep.injectKey.getRef() : dep.injectKey;
                if (dep.visibility instanceof metadata_1.Self) {
                    reflectiveValue = _this.get(injectToken, tryValue, injector_1.InjectFlags.Self);
                }
                else if (dep.visibility instanceof metadata_1.SkipSelf) {
                    if (_this.parentInjector) {
                        reflectiveValue = _this.parentInjector.get(injectToken, tryValue);
                    }
                    else {
                        if (dep.optional) {
                            if (notFoundValue === null_injector_1.THROW_IF_NOT_FOUND) {
                                return null;
                            }
                        }
                        throw reflectiveInjectorErrorFn(injectToken);
                    }
                }
                else {
                    reflectiveValue = _this.get(injectToken, tryValue);
                }
                if (reflectiveValue === tryValue) {
                    if (dep.optional) {
                        if (notFoundValue === null_injector_1.THROW_IF_NOT_FOUND) {
                            return null;
                        }
                        return notFoundValue;
                    }
                    throw reflectiveInjectorErrorFn(injectToken);
                }
                return reflectiveValue;
            });
        };
        return ReflectiveInjector;
    }(injector_1.Injector));
    exports.ReflectiveInjector = ReflectiveInjector;
});

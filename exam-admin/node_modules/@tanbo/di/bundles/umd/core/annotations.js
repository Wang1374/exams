(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Annotations = void 0;
    /**
     * 用于保存 class 的元数据
     */
    var Annotations = /** @class */ (function () {
        function Annotations() {
            this.classes = new Map();
            this.props = new Map();
            this.methods = new Map();
            this.params = new Map();
        }
        Annotations.prototype.setClassMetadata = function (token, params) {
            this.classes.set(token, params);
        };
        Annotations.prototype.getClassMetadata = function (token) {
            return this.classes.get(token);
        };
        Annotations.prototype.getClassMetadataKeys = function () {
            return Array.from(this.classes.keys());
        };
        Annotations.prototype.pushParamMetadata = function (token, params) {
            if (!this.params.has(token)) {
                this.params.set(token, [params]);
            }
            else {
                this.params.get(token).push(params);
            }
        };
        Annotations.prototype.getParamMetadata = function (token) {
            return this.params.get(token);
        };
        Annotations.prototype.getParamMetadataKeys = function () {
            return Array.from(this.params.keys());
        };
        Annotations.prototype.getPropMetadataKeys = function () {
            return Array.from(this.props.keys());
        };
        Annotations.prototype.pushPropMetadata = function (token, params) {
            if (!this.props.has(token)) {
                this.props.set(token, [params]);
            }
            else {
                this.props.get(token).push(params);
            }
        };
        Annotations.prototype.getPropMetadata = function (token) {
            return this.props.get(token);
        };
        Annotations.prototype.pushMethodMetadata = function (token, params) {
            if (!this.methods.has(token)) {
                this.methods.set(token, [params]);
            }
            else {
                this.methods.get(token).push(params);
            }
        };
        Annotations.prototype.getMethodMetadata = function (token) {
            return this.methods.get(token);
        };
        return Annotations;
    }());
    exports.Annotations = Annotations;
});

(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./decorators", "./forward-ref", "./null-injector"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Prop = exports.Optional = exports.SkipSelf = exports.Self = exports.Inject = void 0;
    var decorators_1 = require("./decorators");
    var forward_ref_1 = require("./forward-ref");
    var null_injector_1 = require("./null-injector");
    /**
     * 构造函数参数装饰器，用于改变注入 token
     */
    exports.Inject = function InjectDecorator(token) {
        if (this instanceof exports.Inject) {
            this.token = token;
        }
        else {
            return decorators_1.makeParamDecorator(exports.Inject, new exports.Inject(token));
        }
    };
    exports.Self = function SelfDecorator() {
        if (!(this instanceof exports.Self)) {
            return decorators_1.makeParamDecorator(exports.Self, new exports.Self());
        }
    };
    exports.SkipSelf = function SkipSelfDecorator() {
        if (!(this instanceof exports.SkipSelf)) {
            return decorators_1.makeParamDecorator(exports.SkipSelf, new exports.SkipSelf());
        }
    };
    exports.Optional = function OptionalDecorator() {
        if (!(this instanceof exports.Optional)) {
            return decorators_1.makeParamDecorator(exports.Optional, new exports.Optional());
        }
    };
    exports.Prop = function PropDecorator(token, notFoundValue, flags) {
        if (notFoundValue === void 0) { notFoundValue = null_injector_1.THROW_IF_NOT_FOUND; }
        if (!(this instanceof exports.Prop)) {
            return decorators_1.makePropertyDecorator(exports.Prop, function (instance, propertyName, injector) {
                instance[propertyName] = injector.get(token instanceof forward_ref_1.ForwardRef ? token.getRef() : token, notFoundValue, flags);
            });
        }
    };
});

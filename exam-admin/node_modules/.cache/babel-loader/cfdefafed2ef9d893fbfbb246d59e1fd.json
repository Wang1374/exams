{"remainingRequest":"G:\\exams\\exam-admin\\node_modules\\thread-loader\\dist\\cjs.js!G:\\exams\\exam-admin\\node_modules\\babel-loader\\lib\\index.js!G:\\exams\\exam-admin\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!G:\\exams\\exam-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\exams\\exam-admin\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!G:\\exams\\exam-admin\\src\\components\\verifition\\Verify\\VerifyPoints.vue?vue&type=template&id=32e1805f","dependencies":[{"path":"G:\\exams\\exam-admin\\src\\components\\verifition\\Verify\\VerifyPoints.vue","mtime":1636551969000},{"path":"G:\\exams\\exam-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\exams\\exam-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\exams\\exam-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"G:\\exams\\exam-admin\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":499162500000},{"path":"G:\\exams\\exam-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\exams\\exam-admin\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB2U2hvdyBhcyBfdlNob3csIHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgcmVuZGVyTGlzdCBhcyBfcmVuZGVyTGlzdCwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCB0b0Rpc3BsYXlTdHJpbmcgYXMgX3RvRGlzcGxheVN0cmluZyB9IGZyb20gInZ1ZSI7CnZhciBfaG9pc3RlZF8xID0gewogIHN0eWxlOiB7CiAgICAicG9zaXRpb24iOiAicmVsYXRpdmUiCiAgfQp9Owp2YXIgX2hvaXN0ZWRfMiA9IHsKICBjbGFzczogInZlcmlmeS1pbWctb3V0Igp9OwoKdmFyIF9ob2lzdGVkXzMgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJpIiwgewogIGNsYXNzOiAiaWNvbmZvbnQgaWNvbi1yZWZyZXNoIgp9LCBudWxsLCAtMSk7Cgp2YXIgX2hvaXN0ZWRfNCA9IHsKICBjbGFzczogInZlcmlmeS1tc2ciCn07CmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJkaXYiLCBfaG9pc3RlZF8xLCBbX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yLCBbX2NyZWF0ZVZOb2RlKCJkaXYiLCB7CiAgICBjbGFzczogInZlcmlmeS1pbWctcGFuZWwiLAogICAgc3R5bGU6IHsKICAgICAgJ3dpZHRoJzogJHNldHVwLnNldFNpemUuaW1nV2lkdGgsCiAgICAgICdoZWlnaHQnOiAkc2V0dXAuc2V0U2l6ZS5pbWdIZWlnaHQsCiAgICAgICdiYWNrZ3JvdW5kLXNpemUnOiAkc2V0dXAuc2V0U2l6ZS5pbWdXaWR0aCArICcgJyArICRzZXR1cC5zZXRTaXplLmltZ0hlaWdodCwKICAgICAgJ21hcmdpbi1ib3R0b20nOiAkcHJvcHMudlNwYWNlICsgJ3B4JwogICAgfQogIH0sIFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKCJkaXYiLCB7CiAgICBjbGFzczogInZlcmlmeS1yZWZyZXNoIiwKICAgIHN0eWxlOiB7CiAgICAgICJ6LWluZGV4IjogIjMiCiAgICB9LAogICAgb25DbGljazogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiAkc2V0dXAucmVmcmVzaCAmJiAkc2V0dXAucmVmcmVzaC5hcHBseSgkc2V0dXAsIGFyZ3VtZW50cyk7CiAgICB9KQogIH0sIFtfaG9pc3RlZF8zXSwgNTEyKSwgW1tfdlNob3csICRzZXR1cC5zaG93UmVmcmVzaF1dKSwgX2NyZWF0ZVZOb2RlKCJpbWciLCB7CiAgICBzcmM6ICdkYXRhOmltYWdlL3BuZztiYXNlNjQsJyArICRzZXR1cC5wb2ludEJhY2tJbWdCYXNlLAogICAgcmVmOiAiY2FudmFzIiwKICAgIGFsdDogIiIsCiAgICBzdHlsZTogewogICAgICAid2lkdGgiOiAiMTAwJSIsCiAgICAgICJoZWlnaHQiOiAiMTAwJSIsCiAgICAgICJkaXNwbGF5IjogImJsb2NrIgogICAgfSwKICAgIG9uQ2xpY2s6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJHNldHVwLmJpbmRpbmdDbGljayA/ICRzZXR1cC5jYW52YXNDbGljaygkZXZlbnQpIDogdW5kZWZpbmVkOwogICAgfSkKICB9LCBudWxsLCA4LCBbInNyYyJdKSwgKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KCRzZXR1cC50ZW1wUG9pbnRzLCBmdW5jdGlvbiAodGVtcFBvaW50LCBpbmRleCkgewogICAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJkaXYiLCB7CiAgICAgIGtleTogaW5kZXgsCiAgICAgIGNsYXNzOiAicG9pbnQtYXJlYSIsCiAgICAgIHN0eWxlOiB7CiAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiAnIzFhYmQ2YycsCiAgICAgICAgY29sb3I6ICcjZmZmJywKICAgICAgICAnei1pbmRleCc6IDk5OTksCiAgICAgICAgd2lkdGg6ICcyMHB4JywKICAgICAgICBoZWlnaHQ6ICcyMHB4JywKICAgICAgICAndGV4dC1hbGlnbic6ICdjZW50ZXInLAogICAgICAgICdsaW5lLWhlaWdodCc6ICcyMHB4JywKICAgICAgICAnYm9yZGVyLXJhZGl1cyc6ICc1MCUnLAogICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLAogICAgICAgIHRvcDogcGFyc2VJbnQodGVtcFBvaW50LnkgLSAxMCkgKyAncHgnLAogICAgICAgIGxlZnQ6IHBhcnNlSW50KHRlbXBQb2ludC54IC0gMTApICsgJ3B4JwogICAgICB9CiAgICB9LCBfdG9EaXNwbGF5U3RyaW5nKGluZGV4ICsgMSksIDUpOwogIH0pLCAxMjgpKV0sIDQpXSksIF9jcmVhdGVWTm9kZSgiZGl2IiwgewogICAgY2xhc3M6ICJ2ZXJpZnktYmFyLWFyZWEiLAogICAgc3R5bGU6IHsKICAgICAgJ3dpZHRoJzogJHNldHVwLnNldFNpemUuaW1nV2lkdGgsCiAgICAgICdjb2xvcic6IHRoaXMuYmFyQXJlYUNvbG9yLAogICAgICAnYm9yZGVyLWNvbG9yJzogdGhpcy5iYXJBcmVhQm9yZGVyQ29sb3IsCiAgICAgICdsaW5lLWhlaWdodCc6IHRoaXMuYmFyU2l6ZS5oZWlnaHQKICAgIH0KICB9LCBbX2NyZWF0ZVZOb2RlKCJzcGFuIiwgX2hvaXN0ZWRfNCwgX3RvRGlzcGxheVN0cmluZygkc2V0dXAudGV4dCksIDEpXSwgNCldKTsKfQ=="},{"version":3,"sources":["G:\\exams\\exam-admin\\src\\components\\verifition\\Verify\\VerifyPoints.vue"],"names":[],"mappings":";;AACS,EAAA,KAA0B,EAA1B;AAAA,gBAAA;AAAA;;;AAEI,EAAA,KAAK,EAAC;;;8BAOC,YAAA,CAAqC,GAArC,EAAqC;AAAlC,EAAA,KAAK,EAAC;AAA4B,CAArC,EAAgC,IAAhC,EAAgC,CAAA,CAAhC,C;;;AA+BF,EAAA,KAAK,EAAC;;;uBAxCpB,YAAA,CA0CM,KA1CN,EAAA,UAAA,EA0CM,CAxCF,YAAA,CA+BM,KA/BN,EAAA,UAAA,EA+BM,CA9BF,YAAA,CA6BM,KA7BN,EA6BM;AA7BD,IAAA,KAAK,EAAC,kBA6BL;AA7ByB,IAAA,KAAK,EAAA;AAAA,eAAY,MAAA,CAAA,OAAA,CAAQ,QAApB;gBAA2F,MAAA,CAAA,OAAA,CAAQ,SAAnG;yBAAqL,MAAA,CAAA,OAAA,CAAQ,QAAR,GAAgB,GAAhB,GAAwB,MAAA,CAAA,OAAA,CAAQ,SAArN;uBAAoS,MAAA,CAAA,MAAA,GAAM;AAA1S;AA6B9B,GA7BN,E,iBAKI,YAAA,CAEM,KAFN,EAEM;AAFD,IAAA,KAAK,EAAC,gBAEL;AAFsB,IAAA,KAAiB,EAAjB;AAAA,iBAAA;AAAA,KAEtB;AAFyC,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,MAAA,CAAA,OAAA,IAAA,MAAA,CAAA,OAAA,OAAA,MAAA,YAAF;AAAA,KAAA;AAE9C,GAFN,E,CACI,U,CADJ,E,GAAA,C,YAAuE,MAAA,CAAA,W,KAGvE,YAAA,CAGoD,KAHpD,EAGoD;AAH9C,IAAA,GAAG,EAAA,2BAA2B,MAAA,CAAA,gBAGgB;AAFpD,IAAA,GAAG,EAAC,QAEgD;AADpD,IAAA,GAAG,EAAC,EACgD;AAD5C,IAAA,KAA4C,EAA5C;AAAA,eAAA,MAAA;AAAA,gBAAA,MAAA;AAAA,iBAAA;AAAA,KAC4C;AAAnD,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,UAAA,MAAA;AAAA,aAAE,MAAA,CAAA,YAAA,GAAa,MAAA,CAAA,WAAA,CAAY,MAAZ,CAAb,GAAiC,SAAnC;AAAA,KAAA;AAA8C,GAHpD,E,IAAA,E,CAAA,E,OAAA,C,qBAKA,YAAA,CAeM,SAfN,EAeM,IAfN,EAeM,WAAA,CAf4B,MAAA,CAAA,UAe5B,EAfsC,UAA/B,SAA+B,EAApB,KAAoB,EAAf;yBAA7B,YAAA,CAeM,KAfN,EAeM;AAfyC,MAAA,GAAG,EAAE,KAe9C;AAfqD,MAAA,KAAK,EAAC,YAe3D;AAdA,MAAA,KAAK,EAAA;qCAAA;qBAAA;uBAAA;qBAAA;sBAAA;8BAAA;6BAAA;8BAAA;4BAAA;aAA2a,QAAQ,CAAC,SAAS,CAAC,CAAV,GAAW,EAAZ,CAAR,GAAoB,IAA/b;cAAye,QAAQ,CAAC,SAAS,CAAC,CAAV,GAAW,EAAZ,CAAR,GAAoB;AAA7f;AAcL,KAfN,E,iBAcM,KAAK,GAAA,C,CAdX,EAcW,CAdX,C;GAeM,CAfN,E,GAAA,C,EAbJ,E,CAAA,CA8BE,CA/BN,CAwCE,EAPF,YAAA,CAMM,KANN,EAMM;AAND,IAAA,KAAK,EAAC,iBAML;AALA,IAAA,KAAK,EAAA;AAAA,eAAY,MAAA,CAAA,OAAA,CAAQ,QAApB;oBAAkE,YAAlE;2BAA2H,kBAA3H;0BAAwL,O,CAAQ;AAAhM;AAKL,GANN,E,CAKI,YAAA,CAAwC,MAAxC,EAAA,UAAA,EAAwC,gBAAA,CAAb,MAAA,CAAA,IAAa,CAAxC,EAA+B,CAA/B,C,CALJ,E,CAAA,CAOE,CA1CN,C","sourcesContent":["<template>\n    <div style=\"position: relative\"\n        >\n        <div class=\"verify-img-out\">\n            <div class=\"verify-img-panel\" :style=\"{'width': setSize.imgWidth,\n                                                   'height': setSize.imgHeight,\n                                                   'background-size' : setSize.imgWidth + ' '+ setSize.imgHeight,\n                                                   'margin-bottom': vSpace + 'px'}\"\n                                                    >\n                <div class=\"verify-refresh\" style=\"z-index:3\" @click=\"refresh\" v-show=\"showRefresh\">\n                    <i class=\"iconfont icon-refresh\"></i>\n                </div>\n                <img :src=\"'data:image/png;base64,'+pointBackImgBase\" \n                ref=\"canvas\"\n                alt=\"\"  style=\"width:100%;height:100%;display:block\"\n                @click=\"bindingClick?canvasClick($event):undefined\">\n\n                <div v-for=\"(tempPoint, index) in tempPoints\" :key=\"index\" class=\"point-area\"\n                     :style=\"{\n                        'background-color':'#1abd6c',\n                        color:'#fff',\n                        'z-index':9999,\n                        width:'20px',\n                        height:'20px',\n                        'text-align':'center',\n                        'line-height':'20px',\n                        'border-radius': '50%',\n                        position:'absolute',\n                        top:parseInt(tempPoint.y-10) + 'px',\n                        left:parseInt(tempPoint.x-10) + 'px'\n                     }\">\n                    {{index + 1}}\n                </div>\n            </div>\n        </div>\n        <!-- 'height': this.barSize.height, -->\n        <div class=\"verify-bar-area\"\n             :style=\"{'width': setSize.imgWidth,\n                      'color': this.barAreaColor,\n                      'border-color': this.barAreaBorderColor,\n                      'line-height':this.barSize.height}\">\n            <span class=\"verify-msg\">{{text}}</span>\n        </div>\n    </div>\n</template>\n<script type=\"text/babel\">\n    /**\n     * VerifyPoints\n     * @description 点选\n     * */\n    import {resetSize, _code_chars, _code_color1, _code_color2} from './../utils/util'\n    import {aesEncrypt} from \"./../utils/ase\"\n    import {reqGet,reqCheck}  from \"./../api/index\"\n    import { computed, onMounted, reactive, ref,watch,nextTick,toRefs, watchEffect,getCurrentInstance} from 'vue';\n    export default {\n        name: 'VerifyPoints',\n        props: {\n            //弹出式pop，固定fixed\n            mode: {\n                type: String,\n                default: 'fixed'\n            },\n            captchaType:{\n                type:String,\n            },\n            //间隔\n            vSpace: {\n                type: Number,\n                default: 5\n            },\n            imgSize: {\n                type: Object,\n                default() {\n                    return {\n                        width: '310px',\n                        height: '155px'\n                    }\n                }\n            },\n            barSize: {\n                type: Object,\n                default() {\n                    return {\n                        width: '310px',\n                        height: '40px'\n                    }\n                }\n            }\n        },\n        setup(props,context){\n            const {mode,captchaType,vSpace,imgSize,barSize} = toRefs(props)\n            const { proxy } = getCurrentInstance();\n            let secretKey = ref(''),           //后端返回的ase加密秘钥\n                checkNum = ref(3),             //默认需要点击的字数\n                fontPos = reactive([]),            //选中的坐标信息\n                checkPosArr = reactive([]),        //用户点击的坐标\n                num = ref(1),                 //点击的记数\n                pointBackImgBase = ref(''),    //后端获取到的背景图片\n                poinTextList = reactive([]),        //后端返回的点击字体顺序\n                backToken = ref(''),           //后端返回的token值\n                setSize = reactive({\n                    imgHeight: 0,\n                    imgWidth: 0,\n                    barHeight: 0,\n                    barWidth: 0\n                }),\n                tempPoints = reactive([]),\n                text = ref(''),\n                barAreaColor = ref(undefined),\n                barAreaBorderColor = ref(undefined),\n                showRefresh = ref(true),\n                bindingClick = ref(true)\n\n                \n               \n\n                const init = ()=>{\n                    //加载页面\n                    fontPos.splice(0, fontPos.length)\n                    checkPosArr.splice(0, checkPosArr.length)\n                    num.value = 1\n                    getPictrue();\n                    nextTick(() => {\n                        let {imgHeight,imgWidth,barHeight,barWidth} = resetSize(proxy)\n                        setSize.imgHeight = imgHeight\n                        setSize.imgWidth = imgWidth\n                        setSize.barHeight = barHeight\n                        setSize.barWidth = barWidth\n                        proxy.$parent.$emit('ready', proxy)\n                    })\n                }\n                 onMounted(()=>{\n                    // 禁止拖拽\n                    init()\n                    proxy.$el.onselectstart = function () {\n                        return false\n                    }\n                })\n                const canvas = ref(null)\n                const canvasClick = (e)=>{\n                    checkPosArr.push(getMousePos(canvas, e));\n                    if (num.value == checkNum.value) {\n                        num.value = createPoint(getMousePos(canvas, e));\n                        //按比例转换坐标值\n                        let arr = pointTransfrom(checkPosArr,setSize)\n                        checkPosArr.length = 0\n                        checkPosArr.push(...arr);\n                        //等创建坐标执行完\n                        setTimeout(() => {\n                            // var flag = this.comparePos(this.fontPos, this.checkPosArr);\n                            //发送后端请求\n                            var captchaVerification = secretKey.value? aesEncrypt(backToken.value+'---'+JSON.stringify(checkPosArr),secretKey.value):backToken.value+'---'+JSON.stringify(checkPosArr)\n                            let data = {\n                                captchaType:captchaType.value,\n                                \"pointJson\":secretKey.value? aesEncrypt(JSON.stringify(checkPosArr),secretKey.value):JSON.stringify(checkPosArr),\n                                \"token\":backToken.value\n                            }\n                            reqCheck(data).then(res=>{\n                                if (res.repCode == \"0000\") {\n                                    barAreaColor.value = '#4cae4c'\n                                    barAreaBorderColor.value = '#5cb85c'\n                                    text.value = '验证成功'\n                                    bindingClick.value = false\n                                    if (mode.value=='pop') {\n                                        setTimeout(()=>{\n                                            proxy.$parent.clickShow = false;\n                                            refresh();\n                                        },1500)\n                                    }\n                                    proxy.$parent.$emit('success', {captchaVerification})\n                                }else{\n                                    proxy.$parent.$emit('error', proxy)\n                                    barAreaColor.value = '#d9534f'\n                                    barAreaBorderColor.value = '#d9534f'\n                                    text.value = '验证失败'\n                                    setTimeout(() => {\n                                        refresh();\n                                    }, 700);\n                                }\n                            })\n                        }, 400);\n                    }\n                    if (num.value < checkNum.value) {\n                        num.value = createPoint(getMousePos(canvas, e));\n                    }\n                }\n                 //获取坐标\n                const getMousePos = function (obj, e) {\n                    var x = e.offsetX \n                    var y = e.offsetY \n                    return {x, y}\n                }\n                //创建坐标点\n                const createPoint = function (pos) {\n                    tempPoints.push(Object.assign({}, pos))\n                    return num.value+1;\n                }\n                const refresh = function () {\n                    tempPoints.splice(0, tempPoints.length)\n                    barAreaColor.value = '#000'\n                    barAreaBorderColor.value = '#ddd'\n                    bindingClick.value = true\n                    fontPos.splice(0, fontPos.length)\n                    checkPosArr.splice(0, checkPosArr.length)\n                    num.value = 1\n                    getPictrue();\n                    text.value = '验证失败'\n                    showRefresh.value = true\n                }\n\n                // 请求背景图片和验证图片\n                function getPictrue() {\n                    let data = {\n                        captchaType:captchaType.value\n                    }\n                    reqGet(data).then(res=>{\n                        if (res.repCode == \"0000\") {\n                            pointBackImgBase.value = res.repData.originalImageBase64\n                            backToken.value = res.repData.token\n                            secretKey.value = res.repData.secretKey\n                            poinTextList.value = res.repData.wordList\n                            text.value = '请依次点击【' + poinTextList.value.join(\",\") + '】'\n                        }else{\n                            text.value = res.repMsg;\n                        }\n                    })\n                }\n                //坐标转换函数\n                const pointTransfrom = function(pointArr,imgSize){\n                    var newPointArr = pointArr.map(p=>{\n                        let x = Math.round(310 * p.x/parseInt(imgSize.imgWidth)) \n                        let y =Math.round(155 * p.y/parseInt(imgSize.imgHeight)) \n                        return {x,y}\n                    })\n                    return newPointArr\n                }\n                return {\n                    secretKey,\n                    checkNum,\n                    fontPos,\n                    checkPosArr,\n                    num,\n                    pointBackImgBase,\n                    poinTextList,\n                    backToken,\n                    setSize,\n                    tempPoints,\n                    text,\n                    barAreaColor,\n                    barAreaBorderColor,\n                    showRefresh,\n                    bindingClick,\n                    init,\n                    canvas,\n                    canvasClick,\n                    getMousePos,createPoint,refresh,getPictrue,pointTransfrom\n                }\n        },\n    }\n</script>"],"sourceRoot":""}]}
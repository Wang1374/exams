{"remainingRequest":"G:\\exams\\exam-admin\\node_modules\\thread-loader\\dist\\cjs.js!G:\\exams\\exam-admin\\node_modules\\babel-loader\\lib\\index.js!G:\\exams\\exam-admin\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!G:\\exams\\exam-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\exams\\exam-admin\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!G:\\exams\\exam-admin\\src\\components\\verifition\\Verify\\VerifySlide.vue?vue&type=template&id=5f53fc62","dependencies":[{"path":"G:\\exams\\exam-admin\\src\\components\\verifition\\Verify\\VerifySlide.vue","mtime":1636551969000},{"path":"G:\\exams\\exam-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\exams\\exam-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\exams\\exam-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"G:\\exams\\exam-admin\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":499162500000},{"path":"G:\\exams\\exam-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\exams\\exam-admin\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB2U2hvdyBhcyBfdlNob3csIHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlLCBUcmFuc2l0aW9uIGFzIF9UcmFuc2l0aW9uLCB3aXRoQ3R4IGFzIF93aXRoQ3R4IH0gZnJvbSAidnVlIjsKdmFyIF9ob2lzdGVkXzEgPSB7CiAgc3R5bGU6IHsKICAgICJwb3NpdGlvbiI6ICJyZWxhdGl2ZSIKICB9Cn07Cgp2YXIgX2hvaXN0ZWRfMiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoImkiLCB7CiAgY2xhc3M6ICJpY29uZm9udCBpY29uLXJlZnJlc2giCn0sIG51bGwsIC0xKTsKCmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJkaXYiLCBfaG9pc3RlZF8xLCBbJHByb3BzLnR5cGUgPT09ICcyJyA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygiZGl2IiwgewogICAga2V5OiAwLAogICAgY2xhc3M6ICJ2ZXJpZnktaW1nLW91dCIsCiAgICBzdHlsZTogewogICAgICBoZWlnaHQ6IHBhcnNlSW50KCRzZXR1cC5zZXRTaXplLmltZ0hlaWdodCkgKyAkcHJvcHMudlNwYWNlICsgJ3B4JwogICAgfQogIH0sIFtfY3JlYXRlVk5vZGUoImRpdiIsIHsKICAgIGNsYXNzOiAidmVyaWZ5LWltZy1wYW5lbCIsCiAgICBzdHlsZTogewogICAgICB3aWR0aDogJHNldHVwLnNldFNpemUuaW1nV2lkdGgsCiAgICAgIGhlaWdodDogJHNldHVwLnNldFNpemUuaW1nSGVpZ2h0CiAgICB9CiAgfSwgW19jcmVhdGVWTm9kZSgiaW1nIiwgewogICAgc3JjOiAnZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcgKyAkc2V0dXAuYmFja0ltZ0Jhc2UsCiAgICBhbHQ6ICIiLAogICAgc3R5bGU6IHsKICAgICAgIndpZHRoIjogIjEwMCUiLAogICAgICAiaGVpZ2h0IjogIjEwMCUiLAogICAgICAiZGlzcGxheSI6ICJibG9jayIKICAgIH0KICB9LCBudWxsLCA4LCBbInNyYyJdKSwgX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZSgiZGl2IiwgewogICAgY2xhc3M6ICJ2ZXJpZnktcmVmcmVzaCIsCiAgICBvbkNsaWNrOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRzZXR1cC5yZWZyZXNoICYmICRzZXR1cC5yZWZyZXNoLmFwcGx5KCRzZXR1cCwgYXJndW1lbnRzKTsKICAgIH0pCiAgfSwgW19ob2lzdGVkXzJdLCA1MTIpLCBbW192U2hvdywgJHNldHVwLnNob3dSZWZyZXNoXV0pLCBfY3JlYXRlVk5vZGUoX1RyYW5zaXRpb24sIHsKICAgIG5hbWU6ICJ0aXBzIgogIH0sIHsKICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIFskc2V0dXAudGlwV29yZHMgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soInNwYW4iLCB7CiAgICAgICAga2V5OiAwLAogICAgICAgIGNsYXNzOiBbInZlcmlmeS10aXBzIiwgJHNldHVwLnBhc3NGbGFnID8gJ3N1Yy1iZycgOiAnZXJyLWJnJ10KICAgICAgfSwgX3RvRGlzcGxheVN0cmluZygkc2V0dXAudGlwV29yZHMpLCAzKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCIiLCB0cnVlKV07CiAgICB9KSwKICAgIF86IDEKICB9KV0sIDQpXSwgNCkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgiIiwgdHJ1ZSksIF9jcmVhdGVWTm9kZSgiZGl2IiwgewogICAgY2xhc3M6ICJ2ZXJpZnktYmFyLWFyZWEiLAogICAgc3R5bGU6IHsKICAgICAgd2lkdGg6ICRzZXR1cC5zZXRTaXplLmltZ1dpZHRoLAogICAgICBoZWlnaHQ6ICRwcm9wcy5iYXJTaXplLmhlaWdodCwKICAgICAgJ2xpbmUtaGVpZ2h0JzogJHByb3BzLmJhclNpemUuaGVpZ2h0CiAgICB9CiAgfSwgW19jcmVhdGVWTm9kZSgic3BhbiIsIHsKICAgIGNsYXNzOiAidmVyaWZ5LW1zZyIsCiAgICB0ZXh0Q29udGVudDogX3RvRGlzcGxheVN0cmluZygkc2V0dXAudGV4dCkKICB9LCBudWxsLCA4LCBbInRleHRDb250ZW50Il0pLCBfY3JlYXRlVk5vZGUoImRpdiIsIHsKICAgIGNsYXNzOiAidmVyaWZ5LWxlZnQtYmFyIiwKICAgIHN0eWxlOiB7CiAgICAgIHdpZHRoOiAkc2V0dXAubGVmdEJhcldpZHRoICE9PSB1bmRlZmluZWQgPyAkc2V0dXAubGVmdEJhcldpZHRoIDogJHByb3BzLmJhclNpemUuaGVpZ2h0LAogICAgICBoZWlnaHQ6ICRwcm9wcy5iYXJTaXplLmhlaWdodCwKICAgICAgJ2JvcmRlci1jb2xvcic6ICRzZXR1cC5sZWZ0QmFyQm9yZGVyQ29sb3IsCiAgICAgIHRyYW5zYWN0aW9uOiAkc2V0dXAudHJhbnNpdGlvbldpZHRoCiAgICB9CiAgfSwgW19jcmVhdGVWTm9kZSgic3BhbiIsIHsKICAgIGNsYXNzOiAidmVyaWZ5LW1zZyIsCiAgICB0ZXh0Q29udGVudDogX3RvRGlzcGxheVN0cmluZygkc2V0dXAuZmluaXNoVGV4dCkKICB9LCBudWxsLCA4LCBbInRleHRDb250ZW50Il0pLCBfY3JlYXRlVk5vZGUoImRpdiIsIHsKICAgIGNsYXNzOiAidmVyaWZ5LW1vdmUtYmxvY2siLAogICAgb25Ub3VjaHN0YXJ0OiBfY2FjaGVbMl0gfHwgKF9jYWNoZVsyXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRzZXR1cC5zdGFydCAmJiAkc2V0dXAuc3RhcnQuYXBwbHkoJHNldHVwLCBhcmd1bWVudHMpOwogICAgfSksCiAgICBvbk1vdXNlZG93bjogX2NhY2hlWzNdIHx8IChfY2FjaGVbM10gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiAkc2V0dXAuc3RhcnQgJiYgJHNldHVwLnN0YXJ0LmFwcGx5KCRzZXR1cCwgYXJndW1lbnRzKTsKICAgIH0pLAogICAgc3R5bGU6IHsKICAgICAgd2lkdGg6ICRwcm9wcy5iYXJTaXplLmhlaWdodCwKICAgICAgaGVpZ2h0OiAkcHJvcHMuYmFyU2l6ZS5oZWlnaHQsCiAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogJHNldHVwLm1vdmVCbG9ja0JhY2tncm91bmRDb2xvciwKICAgICAgbGVmdDogJHNldHVwLm1vdmVCbG9ja0xlZnQsCiAgICAgIHRyYW5zaXRpb246ICRzZXR1cC50cmFuc2l0aW9uTGVmdAogICAgfQogIH0sIFtfY3JlYXRlVk5vZGUoImkiLCB7CiAgICBjbGFzczogWyd2ZXJpZnktaWNvbiBpY29uZm9udCcsICRzZXR1cC5pY29uQ2xhc3NdLAogICAgc3R5bGU6IHsKICAgICAgY29sb3I6ICRzZXR1cC5pY29uQ29sb3IKICAgIH0KICB9LCBudWxsLCA2KSwgJHByb3BzLnR5cGUgPT09ICcyJyA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygiZGl2IiwgewogICAga2V5OiAwLAogICAgY2xhc3M6ICJ2ZXJpZnktc3ViLWJsb2NrIiwKICAgIHN0eWxlOiB7CiAgICAgICd3aWR0aCc6IE1hdGguZmxvb3IocGFyc2VJbnQoJHNldHVwLnNldFNpemUuaW1nV2lkdGgpICogNDcgLyAzMTApICsgJ3B4JywKICAgICAgJ2hlaWdodCc6ICRzZXR1cC5zZXRTaXplLmltZ0hlaWdodCwKICAgICAgJ3RvcCc6ICctJyArIChwYXJzZUludCgkc2V0dXAuc2V0U2l6ZS5pbWdIZWlnaHQpICsgJHByb3BzLnZTcGFjZSkgKyAncHgnLAogICAgICAnYmFja2dyb3VuZC1zaXplJzogJHNldHVwLnNldFNpemUuaW1nV2lkdGggKyAnICcgKyAkc2V0dXAuc2V0U2l6ZS5pbWdIZWlnaHQKICAgIH0KICB9LCBbX2NyZWF0ZVZOb2RlKCJpbWciLCB7CiAgICBzcmM6ICdkYXRhOmltYWdlL3BuZztiYXNlNjQsJyArICRzZXR1cC5ibG9ja0JhY2tJbWdCYXNlLAogICAgYWx0OiAiIiwKICAgIHN0eWxlOiB7CiAgICAgICJ3aWR0aCI6ICIxMDAlIiwKICAgICAgImhlaWdodCI6ICIxMDAlIiwKICAgICAgImRpc3BsYXkiOiAiYmxvY2siCiAgICB9CiAgfSwgbnVsbCwgOCwgWyJzcmMiXSldLCA0KSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCIiLCB0cnVlKV0sIDM2KV0sIDQpXSwgNCldKTsKfQ=="},{"version":3,"sources":["G:\\exams\\exam-admin\\src\\components\\verifition\\Verify\\VerifySlide.vue"],"names":[],"mappings":";;AACS,EAAA,KAA2B,EAA3B;AAAA,gBAAA;AAAA;;;8BAOyE,YAAA,CAAqC,GAArC,EAAqC;AAAlC,EAAA,KAAK,EAAC;AAA4B,CAArC,EAAgC,IAAhC,EAAgC,CAAA,CAAhC,C;;;uBAP9E,YAAA,CAuCM,KAvCN,EAAA,UAAA,EAuCM,CAtCS,MAAA,CAAA,IAAA,KAAI,G,kBAAf,YAAA,CAYM,KAZN,EAYM;UAAA;AAZmB,IAAA,KAAK,EAAC,gBAYzB;AAXA,IAAA,KAAK,EAAA;AAAA,MAAA,MAAA,EAAY,QAAQ,CAAC,MAAA,CAAA,OAAA,CAAQ,SAAT,CAAR,GAA8B,MAAA,CAAA,MAA1C,GAAgD;AAAhD;AAWL,GAZN,E,CAGI,YAAA,CAQM,KARN,EAQM;AARD,IAAA,KAAK,EAAC,kBAQL;AARyB,IAAA,KAAK,EAAA;AAAA,MAAA,KAAA,EAAU,MAAA,CAAA,OAAA,CAAQ,QAAlB;cAAuF,MAAA,CAAA,OAAA,CAAQ;AAA/F;AAQ9B,GARN,E,CAEI,YAAA,CAAqG,KAArG,EAAqG;AAA/F,IAAA,GAAG,EAAA,2BAA2B,MAAA,CAAA,WAAiE;AAApD,IAAA,GAAG,EAAC,EAAgD;AAA7C,IAAA,KAA4C,EAA5C;AAAA,eAAA,MAAA;AAAA,gBAAA,MAAA;AAAA,iBAAA;AAAA;AAA6C,GAArG,E,IAAA,E,CAAA,E,OAAA,C,kBACA,YAAA,CACM,KADN,EACM;AADD,IAAA,KAAK,EAAC,gBACL;AADuB,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,MAAA,CAAA,OAAA,IAAA,MAAA,CAAA,OAAA,OAAA,MAAA,YAAF;AAAA,KAAA;AAC5B,GADN,E,CAAkE,U,CAAlE,E,GAAA,C,YAAqD,MAAA,CAAA,W,KAErD,YAAA,CAEa,WAFb,EAEa;AAFD,IAAA,IAAI,EAAC;AAEJ,GAFb,EAAuB;sBACnB;AAAA,aAAkG,CAAlE,MAAA,CAAA,Q,kBAAhC,YAAA,CAAkG,MAAlG,EAAkG;cAAA;AAA5F,QAAA,KAAK,EAAA,CAAC,aAAD,EAAuC,MAAA,CAAA,QAAA,GAAQ,QAAR,GAAQ,QAA/C;AAAuF,OAAlG,E,iBAAiF,MAAA,CAAA,Q,CAAjF,EAAyF,CAAzF,C,iCAAkG,CAAlG;AAAA,K,CADmB;;AAAA,GAAvB,C,CALJ,E,CAAA,C,CAHJ,E,CAAA,C,iCAsCE,EAxBF,YAAA,CAuBM,KAvBN,EAuBM;AAvBD,IAAA,KAAK,EAAC,iBAuBL;AAvBwB,IAAA,KAAK,EAAA;AAAA,MAAA,KAAA,EAAU,MAAA,CAAA,OAAA,CAAQ,QAAlB;cAAkF,MAAA,CAAA,OAAA,CAAQ,MAA1F;qBAA8J,MAAA,CAAA,OAAA,CAAQ;AAAtK;AAuB7B,GAvBN,E,CAGI,YAAA,CAA8C,MAA9C,EAA8C;AAAxC,IAAA,KAAK,EAAC,YAAkC;iBAArB,gBAAA,CAAa,MAAA,CAAD,IAAZ;AAAqB,GAA9C,E,IAAA,E,CAAA,E,eAAA,C,EACA,YAAA,CAkBM,KAlBN,EAkBM;AAlBD,IAAA,KAAK,EAAC,iBAkBL;AAjBA,IAAA,KAAK,EAAA;AAAA,MAAA,KAAA,EAAW,MAAA,CAAA,YAAA,KAAe,SAA1B,GAAqC,MAAA,CAAA,YAArC,GAAmD,MAAA,CAAA,OAAA,CAAQ,MAA3D;AAAiE,MAAA,MAAA,EAAU,MAAA,CAAA,OAAA,CAAQ,MAAnF;AAAyF,sBAAkB,MAAA,CAAA,kBAA3G;AAA6H,MAAA,WAAA,EAAe,MAAA,CAAA;AAA5I;AAiBL,GAlBN,E,CAEI,YAAA,CAAoD,MAApD,EAAoD;AAA9C,IAAA,KAAK,EAAC,YAAwC;iBAA3B,gBAAA,CAAmB,MAAA,CAAD,UAAlB;AAA2B,GAApD,E,IAAA,E,CAAA,E,eAAA,C,EACA,YAAA,CAcM,KAdN,EAcM;AAdD,IAAA,KAAK,EAAC,mBAcL;AAbA,IAAA,YAAU,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,MAAA,CAAA,KAAA,IAAA,MAAA,CAAA,KAAA,OAAA,MAAA,YAAF;AAAA,KAAA,CAaV;AAZA,IAAA,WAAS,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,MAAA,CAAA,KAAA,IAAA,MAAA,CAAA,KAAA,OAAA,MAAA,YAAF;AAAA,KAAA,CAYT;AAXA,IAAA,KAAK,EAAA;AAAA,MAAA,KAAA,EAAU,MAAA,CAAA,OAAA,CAAQ,MAAlB;AAAwB,MAAA,MAAA,EAAU,MAAA,CAAA,OAAA,CAAQ,MAA1C;AAAgD,0BAAsB,MAAA,CAAA,wBAAtE;AAA8F,MAAA,IAAA,EAAQ,MAAA,CAAA,aAAtG;AAAmH,MAAA,UAAA,EAAc,MAAA,CAAA;AAAjI;AAWL,GAdN,E,CAII,YAAA,CACmC,GADnC,EACmC;AAD/B,IAAA,KAAK,EAAA,CAAA,sBAAA,EAA2B,MAAA,CAAA,SAA3B,CAC0B;AAA/B,IAAA,KAAK,EAAA;AAAA,MAAA,KAAA,EAAU,MAAA,CAAA;AAAV;AAA0B,GADnC,E,IAAA,E,CAAA,C,EAEW,MAAA,CAAA,IAAA,KAAI,G,kBAAf,YAAA,CAOM,KAPN,EAOM;UAAA;AAPmB,IAAA,KAAK,EAAC,kBAOzB;AAND,IAAA,KAAK,EAAA;AAAA,eAAW,IAAI,CAAC,KAAL,CAAW,QAAQ,CAAC,MAAA,CAAA,OAAA,CAAQ,QAAT,CAAR,GAAyB,EAAzB,GAAyB,GAApC,IAAoC,IAA/C;gBAA4G,MAAA,CAAA,OAAA,CAAQ,SAApH;oBAA8K,QAAQ,CAAC,MAAA,CAAA,OAAA,CAAQ,SAAT,CAAR,GAA8B,MAAA,CAAA,M,IAAM,IAAlN;yBAAiR,MAAA,CAAA,OAAA,CAAQ,QAAR,GAAgB,GAAhB,GAAyB,MAAA,CAAA,OAAA,CAAQ;AAAlT;AAMJ,GAPN,E,CAMI,YAAA,CAA2G,KAA3G,EAA2G;AAArG,IAAA,GAAG,EAAA,2BAA2B,MAAA,CAAA,gBAAuE;AAArD,IAAA,GAAG,EAAC,EAAiD;AAA7C,IAAA,KAA4C,EAA5C;AAAA,eAAA,MAAA;AAAA,gBAAA,MAAA;AAAA,iBAAA;AAAA;AAA6C,GAA3G,E,IAAA,E,CAAA,E,OAAA,C,CANJ,E,CAAA,C,kCANJ,E,EAAA,C,CAHJ,E,CAAA,C,CAJJ,E,CAAA,CAwBE,CAvCN,C","sourcesContent":["<template>\n    <div style=\"position: relative;\">\n        <div v-if=\"type === '2'\" class=\"verify-img-out\"\n             :style=\"{height: (parseInt(setSize.imgHeight) + vSpace) + 'px'}\"\n            >\n            <div class=\"verify-img-panel\" :style=\"{width: setSize.imgWidth,\n                                                   height: setSize.imgHeight,}\">\n                <img :src=\"'data:image/png;base64,'+backImgBase\" alt=\"\" style=\"width:100%;height:100%;display:block\">\n                <div class=\"verify-refresh\" @click=\"refresh\" v-show=\"showRefresh\"><i class=\"iconfont icon-refresh\"></i>\n                </div>\n                <transition name=\"tips\">\n                    <span class=\"verify-tips\" v-if=\"tipWords\" :class=\"passFlag ?'suc-bg':'err-bg'\">{{tipWords}}</span>\n                </transition>\n            </div>\n        </div>\n        <!-- 公共部分 -->\n        <div class=\"verify-bar-area\" :style=\"{width: setSize.imgWidth,\n                                              height: barSize.height,\n                                              'line-height':barSize.height}\">\n            <span class=\"verify-msg\" v-text=\"text\"></span>\n            <div class=\"verify-left-bar\"\n                 :style=\"{width: (leftBarWidth!==undefined)?leftBarWidth: barSize.height, height: barSize.height, 'border-color': leftBarBorderColor, transaction: transitionWidth}\">\n                <span class=\"verify-msg\" v-text=\"finishText\"></span>\n                <div class=\"verify-move-block\"\n                     @touchstart=\"start\"\n                     @mousedown=\"start\"\n                     :style=\"{width: barSize.height, height: barSize.height, 'background-color': moveBlockBackgroundColor, left: moveBlockLeft, transition: transitionLeft}\">\n                    <i :class=\"['verify-icon iconfont', iconClass]\"\n                       :style=\"{color: iconColor}\"></i>\n                    <div v-if=\"type === '2'\" class=\"verify-sub-block\"\n                        :style=\"{'width':Math.floor(parseInt(setSize.imgWidth)*47/310)+ 'px',\n                                  'height': setSize.imgHeight,\n                                  'top':'-' + (parseInt(setSize.imgHeight) + vSpace) + 'px',\n                                  'background-size': setSize.imgWidth + ' ' + setSize.imgHeight,\n                                  }\">\n                        <img :src=\"'data:image/png;base64,'+blockBackImgBase\" alt=\"\"  style=\"width:100%;height:100%;display:block\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<script type=\"text/babel\">\n    /**\n     * VerifySlide\n     * @description 滑块\n     * */\n    import {aesEncrypt} from \"./../utils/ase\"\n    import {resetSize} from './../utils/util'\n    import {reqGet,reqCheck}  from \"./../api/index\"\n import { computed, onMounted, reactive, ref,watch,nextTick,toRefs, watchEffect,getCurrentInstance} from 'vue';\n    //  \"captchaType\":\"blockPuzzle\",\n    export default {\n        name: 'VerifySlide',\n        props: {\n            captchaType:{\n                type:String,\n            },\n            type: {\n                type: String,\n                default: '1'\n            },\n            //弹出式pop，固定fixed\n            mode: {\n                type: String,\n                default: 'fixed'\n            },\n            vSpace: {\n                type: Number,\n                default: 5\n            },\n            explain: {\n                type: String,\n                default: '向右滑动完成验证'\n            },\n            imgSize: {\n                type: Object,\n                default() {\n                    return {\n                        width: '310px',\n                        height: '155px'\n                    }\n                }\n            },\n            blockSize: {\n                type: Object,\n                default() {\n                    return {\n                        width: '50px',\n                        height: '50px'\n                    }\n                }\n            },\n            barSize: {\n                type: Object,\n                default() {\n                    return {\n                        width: '310px',\n                        height: '40px'\n                    }\n                }\n            }\n        },\n        setup(props,context){\n            const {mode,captchaType,vSpace,imgSize,barSize,type,blockSize,explain} = toRefs(props)\n            const { proxy } = getCurrentInstance();\n            let secretKey = ref(''),           //后端返回的ase加密秘钥\n                passFlag = ref(''),         //是否通过的标识\n                backImgBase = ref(''),      //验证码背景图片\n                blockBackImgBase = ref(''), //验证滑块的背景图片\n                backToken = ref(''),        //后端返回的唯一token值\n                startMoveTime = ref(''),    //移动开始的时间\n                endMovetime = ref(''),      //移动结束的时间\n                tipsBackColor = ref(''),    //提示词的背景颜色\n                tipWords = ref(''),\n                text = ref(''),\n                finishText = ref(''),\n                setSize = reactive({\n                    imgHeight: 0,\n                    imgWidth: 0,\n                    barHeight: 0,\n                    barWidth: 0\n                }),\n                top = ref(0),\n                left = ref(0),\n                moveBlockLeft = ref(undefined),\n                leftBarWidth = ref(undefined),\n                // 移动中样式\n                moveBlockBackgroundColor = ref(undefined),\n                leftBarBorderColor = ref('#ddd'),\n                iconColor = ref(undefined),\n                iconClass = ref('icon-right'),\n                status = ref(false),\t    //鼠标状态\n                isEnd = ref(false) ,\t\t//是够验证完成\n                showRefresh = ref(true),\n                transitionLeft = ref(''),\n                transitionWidth = ref(''),\n                startLeft = ref(0) \n\n                const barArea = computed(()=>{\n                    return proxy.$el.querySelector('.verify-bar-area')\n                })\n                function init() {\n                    text.value = explain.value\n                    getPictrue();\n                    nextTick(() => {\n                        let {imgHeight,imgWidth,barHeight,barWidth} = resetSize(proxy)\n                        setSize.imgHeight = imgHeight\n                        setSize.imgWidth = imgWidth\n                        setSize.barHeight = barHeight\n                        setSize.barWidth = barWidth\n                        proxy.$parent.$emit('ready', proxy)\n                    })\n\n                    window.removeEventListener(\"touchmove\", function (e) {\n                        move(e);\n                    });\n                    window.removeEventListener(\"mousemove\", function (e) {\n                        move(e);\n                    });\n\n                    //鼠标松开\n                    window.removeEventListener(\"touchend\", function () {\n                        end();\n                    });\n                    window.removeEventListener(\"mouseup\", function () {\n                        end();\n                    });\n\n                    window.addEventListener(\"touchmove\", function (e) {\n                        move(e);\n                    });\n                    window.addEventListener(\"mousemove\", function (e) {\n                        move(e);\n                    });\n\n                    //鼠标松开\n                    window.addEventListener(\"touchend\", function () {\n                        end();\n                    });\n                    window.addEventListener(\"mouseup\", function () {\n                        end();\n                    });\n                }\n                watch(type,()=>{\n                    init()\n                })\n                onMounted(()=>{\n                    // 禁止拖拽\n                    init()\n                    proxy.$el.onselectstart = function () {\n                        return false\n                    }\n                })\n                //鼠标按下\n                function start(e) {\n                    e = e || window.event\n                    if (!e.touches) {  //兼容PC端 \n                        var x = e.clientX;\n                    } else {           //兼容移动端\n                        var x = e.touches[0].pageX;\n                    }\n                    console.log(barArea);\n                    startLeft.value =Math.floor(x - barArea.value.getBoundingClientRect().left);\n                    startMoveTime.value = +new Date();    //开始滑动的时间\n                    if (isEnd.value == false) {\n                        text.value = ''\n                        moveBlockBackgroundColor.value = '#337ab7'\n                        leftBarBorderColor.value = '#337AB7'\n                        iconColor.value = '#fff'\n                        e.stopPropagation();\n                        status.value = true;\n                    }\n                }\n                //鼠标移动\n                function move(e) {\n                    e = e || window.event\n                    if (status.value && isEnd.value == false) {\n                        if (!e.touches) {  //兼容PC端 \n                            var x = e.clientX;\n                        } else {           //兼容移动端\n                            var x = e.touches[0].pageX;\n                        }\n                        var bar_area_left = barArea.value.getBoundingClientRect().left;\n                        var move_block_left = x - bar_area_left //小方块相对于父元素的left值\n                        if (move_block_left >= barArea.value.offsetWidth - parseInt(parseInt(blockSize.width) / 2) - 2) {\n                            move_block_left = barArea.value.offsetWidth - parseInt(parseInt(blockSize.width) / 2) - 2;\n                        }\n                        if (move_block_left <= 0) {\n                            move_block_left = parseInt(parseInt(blockSize.width) / 2);\n                        }\n                        //拖动后小方块的left值\n                        moveBlockLeft.value = (move_block_left - startLeft.value) + \"px\"\n                        leftBarWidth.value = (move_block_left - startLeft.value) + \"px\"\n                    }\n                }\n\n                //鼠标松开\n                function end() {\n                    endMovetime.value = +new Date(); \n                    //判断是否重合\n                    if (status.value && isEnd.value == false) {\n                        var moveLeftDistance = parseInt((moveBlockLeft.value || '').replace('px', ''));\n                        moveLeftDistance = moveLeftDistance * 310/ parseInt(setSize.imgWidth)\n                        let data = {\n                            captchaType:captchaType.value,\n                            \"pointJson\":secretKey.value ? aesEncrypt(JSON.stringify({x:moveLeftDistance,y:5.0}),secretKey.value):JSON.stringify({x:moveLeftDistance,y:5.0}),\n                            \"token\":backToken.value\n                        }\n                        reqCheck(data).then(res=>{\n                            if (res.repCode == \"0000\") {\n                                moveBlockBackgroundColor.value = '#5cb85c'\n                                leftBarBorderColor.value = '#5cb85c'\n                                iconColor.value = '#fff'\n                                iconClass.value = 'icon-check'\n                                showRefresh.value = false\n                                isEnd.value = true;   \n                                if (mode.value=='pop') {\n                                    setTimeout(()=>{\n                                        proxy.$parent.clickShow = false;\n                                        refresh();\n                                    },1500)\n                                }\n                                passFlag.value = true\n                                tipWords.value = `${((endMovetime.value-startMoveTime.value)/1000).toFixed(2)}s验证成功`\n                                var captchaVerification = secretKey.value ? aesEncrypt(backToken.value+'---'+JSON.stringify({x:moveLeftDistance,y:5.0}),secretKey.value):backToken.value+'---'+JSON.stringify({x:moveLeftDistance,y:5.0})\n                                setTimeout(()=>{\n                                    tipWords.value = \"\"\n                                    proxy.$parent.closeBox();\n                                    proxy.$parent.$emit('success', {captchaVerification})\n                                },1000)\n                            }else{\n                                moveBlockBackgroundColor.value = '#d9534f'\n                                leftBarBorderColor.value = '#d9534f'\n                                iconColor.value = '#fff'\n                                iconClass.value = 'icon-close'\n                                passFlag.value = false\n                                setTimeout(function () {\n                                    refresh();\n                                }, 1000);\n                                proxy.$parent.$emit('error',proxy)\n                                tipWords.value = \"验证失败\"\n                                setTimeout(()=>{\n                                        tipWords.value = \"\"\n                                },1000)\n                            }\n                        })\n                        status.value = false;\n                    }\n                }\n\n                const refresh = ()=>{\n                    showRefresh.value = true\n                    finishText.value = ''\n\n                    transitionLeft.value = 'left .3s'\n                    moveBlockLeft.value = 0\n\n                    leftBarWidth.value = undefined\n                    transitionWidth.value = 'width .3s'\n\n                    leftBarBorderColor.value = '#ddd'\n                    moveBlockBackgroundColor.value = '#fff'\n                    iconColor.value = '#000'\n                    iconClass.value = 'icon-right'\n                    isEnd.value = false\n\n                    getPictrue()\n                    setTimeout(() => {\n                        transitionWidth.value = ''\n                        transitionLeft.value = ''\n                        text.value = explain.value\n                    }, 300)\n                }\n\n                // 请求背景图片和验证图片\n                function getPictrue(){\n                    let data = {\n                        captchaType:captchaType.value\n                    }\n                    reqGet(data).then(res=>{\n                        if (res.repCode == \"0000\") {\n                            backImgBase.value = res.repData.originalImageBase64\n                            blockBackImgBase.value = res.repData.jigsawImageBase64\n                            backToken.value = res.repData.token\n                            secretKey.value = res.repData.secretKey\n                        }else{\n                            tipWords.value = res.repMsg;\n                        }\n                    })\n                }\n                return {\n                    secretKey,           //后端返回的ase加密秘钥\n                    passFlag,         //是否通过的标识\n                    backImgBase,      //验证码背景图片\n                    blockBackImgBase, //验证滑块的背景图片\n                    backToken,        //后端返回的唯一token值\n                    startMoveTime,    //移动开始的时间\n                    endMovetime,      //移动结束的时间\n                    tipsBackColor,    //提示词的背景颜色\n                    tipWords,\n                    text,\n                    finishText,\n                    setSize,\n                    top,\n                    left,\n                    moveBlockLeft,\n                    leftBarWidth,\n                    // 移动中样式\n                    moveBlockBackgroundColor,\n                    leftBarBorderColor,\n                    iconColor,\n                    iconClass,\n                    status,\t    //鼠标状态\n                    isEnd,\t\t//是够验证完成\n                    showRefresh,\n                    transitionLeft,\n                    transitionWidth,\n                    barArea,\n                    refresh,\n                    start\n                }\n        },\n    }\n</script>\n\n"],"sourceRoot":""}]}
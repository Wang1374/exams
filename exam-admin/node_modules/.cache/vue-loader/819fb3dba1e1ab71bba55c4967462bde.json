{"remainingRequest":"/Users/sw/Documents/examSystem/exams/exam-admin/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/sw/Documents/examSystem/exams/exam-admin/src/components/verifition/Verify/VerifySlide.vue?vue&type=template&id=e37722d8","dependencies":[{"path":"/Users/sw/Documents/examSystem/exams/exam-admin/src/components/verifition/Verify/VerifySlide.vue","mtime":1636551969000},{"path":"/Users/sw/Documents/examSystem/exams/exam-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sw/Documents/examSystem/exams/exam-admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/sw/Documents/examSystem/exams/exam-admin/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/Users/sw/Documents/examSystem/exams/exam-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sw/Documents/examSystem/exams/exam-admin/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8ZGl2IHN0eWxlPSJwb3NpdGlvbjogcmVsYXRpdmU7Ij4KICAgICAgICA8ZGl2IHYtaWY9InR5cGUgPT09ICcyJyIgY2xhc3M9InZlcmlmeS1pbWctb3V0IgogICAgICAgICAgICAgOnN0eWxlPSJ7aGVpZ2h0OiAocGFyc2VJbnQoc2V0U2l6ZS5pbWdIZWlnaHQpICsgdlNwYWNlKSArICdweCd9IgogICAgICAgICAgICA+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InZlcmlmeS1pbWctcGFuZWwiIDpzdHlsZT0ie3dpZHRoOiBzZXRTaXplLmltZ1dpZHRoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHNldFNpemUuaW1nSGVpZ2h0LH0iPgogICAgICAgICAgICAgICAgPGltZyA6c3JjPSInZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcrYmFja0ltZ0Jhc2UiIGFsdD0iIiBzdHlsZT0id2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmJsb2NrIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InZlcmlmeS1yZWZyZXNoIiBAY2xpY2s9InJlZnJlc2giIHYtc2hvdz0ic2hvd1JlZnJlc2giPjxpIGNsYXNzPSJpY29uZm9udCBpY29uLXJlZnJlc2giPjwvaT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPHRyYW5zaXRpb24gbmFtZT0idGlwcyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZlcmlmeS10aXBzIiB2LWlmPSJ0aXBXb3JkcyIgOmNsYXNzPSJwYXNzRmxhZyA/J3N1Yy1iZyc6J2Vyci1iZyciPnt7dGlwV29yZHN9fTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvdHJhbnNpdGlvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLSDlhazlhbHpg6jliIYgLS0+CiAgICAgICAgPGRpdiBjbGFzcz0idmVyaWZ5LWJhci1hcmVhIiA6c3R5bGU9Int3aWR0aDogc2V0U2l6ZS5pbWdXaWR0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogYmFyU2l6ZS5oZWlnaHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGluZS1oZWlnaHQnOmJhclNpemUuaGVpZ2h0fSI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2ZXJpZnktbXNnIiB2LXRleHQ9InRleHQiPjwvc3Bhbj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idmVyaWZ5LWxlZnQtYmFyIgogICAgICAgICAgICAgICAgIDpzdHlsZT0ie3dpZHRoOiAobGVmdEJhcldpZHRoIT09dW5kZWZpbmVkKT9sZWZ0QmFyV2lkdGg6IGJhclNpemUuaGVpZ2h0LCBoZWlnaHQ6IGJhclNpemUuaGVpZ2h0LCAnYm9yZGVyLWNvbG9yJzogbGVmdEJhckJvcmRlckNvbG9yLCB0cmFuc2FjdGlvbjogdHJhbnNpdGlvbldpZHRofSI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmVyaWZ5LW1zZyIgdi10ZXh0PSJmaW5pc2hUZXh0Ij48L3NwYW4+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ2ZXJpZnktbW92ZS1ibG9jayIKICAgICAgICAgICAgICAgICAgICAgQHRvdWNoc3RhcnQ9InN0YXJ0IgogICAgICAgICAgICAgICAgICAgICBAbW91c2Vkb3duPSJzdGFydCIKICAgICAgICAgICAgICAgICAgICAgOnN0eWxlPSJ7d2lkdGg6IGJhclNpemUuaGVpZ2h0LCBoZWlnaHQ6IGJhclNpemUuaGVpZ2h0LCAnYmFja2dyb3VuZC1jb2xvcic6IG1vdmVCbG9ja0JhY2tncm91bmRDb2xvciwgbGVmdDogbW92ZUJsb2NrTGVmdCwgdHJhbnNpdGlvbjogdHJhbnNpdGlvbkxlZnR9Ij4KICAgICAgICAgICAgICAgICAgICA8aSA6Y2xhc3M9IlsndmVyaWZ5LWljb24gaWNvbmZvbnQnLCBpY29uQ2xhc3NdIgogICAgICAgICAgICAgICAgICAgICAgIDpzdHlsZT0ie2NvbG9yOiBpY29uQ29sb3J9Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPSJ0eXBlID09PSAnMiciIGNsYXNzPSJ2ZXJpZnktc3ViLWJsb2NrIgogICAgICAgICAgICAgICAgICAgICAgICA6c3R5bGU9Insnd2lkdGgnOk1hdGguZmxvb3IocGFyc2VJbnQoc2V0U2l6ZS5pbWdXaWR0aCkqNDcvMzEwKSsgJ3B4JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiBzZXRTaXplLmltZ0hlaWdodCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0b3AnOictJyArIChwYXJzZUludChzZXRTaXplLmltZ0hlaWdodCkgKyB2U3BhY2UpICsgJ3B4JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLXNpemUnOiBzZXRTaXplLmltZ1dpZHRoICsgJyAnICsgc2V0U2l6ZS5pbWdIZWlnaHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyA6c3JjPSInZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcrYmxvY2tCYWNrSW1nQmFzZSIgYWx0PSIiICBzdHlsZT0id2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmJsb2NrIj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo="},{"version":3,"sources":["/Users/sw/Documents/examSystem/exams/exam-admin/src/components/verifition/Verify/VerifySlide.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAChE;YACA,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;mDACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/D,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACnB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACZ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;8CACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;8CACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBACtgBACpK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnD,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBACjoBACxJ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;uBAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAClC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;kCAC1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;kCAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;kCACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;kCAC7D,CAAC,CAAC;woBAC9G,CAAC,CAAC,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,CAAC,CAAC,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC,CAAC,CAAC;IACT,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/sw/Documents/examSystem/exams/exam-admin/src/components/verifition/Verify/VerifySlide.vue","sourceRoot":"","sourcesContent":["<template>\n    <div style=\"position: relative;\">\n        <div v-if=\"type === '2'\" class=\"verify-img-out\"\n             :style=\"{height: (parseInt(setSize.imgHeight) + vSpace) + 'px'}\"\n            >\n            <div class=\"verify-img-panel\" :style=\"{width: setSize.imgWidth,\n                                                   height: setSize.imgHeight,}\">\n                <img :src=\"'data:image/png;base64,'+backImgBase\" alt=\"\" style=\"width:100%;height:100%;display:block\">\n                <div class=\"verify-refresh\" @click=\"refresh\" v-show=\"showRefresh\"><i class=\"iconfont icon-refresh\"></i>\n                </div>\n                <transition name=\"tips\">\n                    <span class=\"verify-tips\" v-if=\"tipWords\" :class=\"passFlag ?'suc-bg':'err-bg'\">{{tipWords}}</span>\n                </transition>\n            </div>\n        </div>\n        <!-- 公共部分 -->\n        <div class=\"verify-bar-area\" :style=\"{width: setSize.imgWidth,\n                                              height: barSize.height,\n                                              'line-height':barSize.height}\">\n            <span class=\"verify-msg\" v-text=\"text\"></span>\n            <div class=\"verify-left-bar\"\n                 :style=\"{width: (leftBarWidth!==undefined)?leftBarWidth: barSize.height, height: barSize.height, 'border-color': leftBarBorderColor, transaction: transitionWidth}\">\n                <span class=\"verify-msg\" v-text=\"finishText\"></span>\n                <div class=\"verify-move-block\"\n                     @touchstart=\"start\"\n                     @mousedown=\"start\"\n                     :style=\"{width: barSize.height, height: barSize.height, 'background-color': moveBlockBackgroundColor, left: moveBlockLeft, transition: transitionLeft}\">\n                    <i :class=\"['verify-icon iconfont', iconClass]\"\n                       :style=\"{color: iconColor}\"></i>\n                    <div v-if=\"type === '2'\" class=\"verify-sub-block\"\n                        :style=\"{'width':Math.floor(parseInt(setSize.imgWidth)*47/310)+ 'px',\n                                  'height': setSize.imgHeight,\n                                  'top':'-' + (parseInt(setSize.imgHeight) + vSpace) + 'px',\n                                  'background-size': setSize.imgWidth + ' ' + setSize.imgHeight,\n                                  }\">\n                        <img :src=\"'data:image/png;base64,'+blockBackImgBase\" alt=\"\"  style=\"width:100%;height:100%;display:block\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<script type=\"text/babel\">\n    /**\n     * VerifySlide\n     * @description 滑块\n     * */\n    import {aesEncrypt} from \"./../utils/ase\"\n    import {resetSize} from './../utils/util'\n    import {reqGet,reqCheck}  from \"./../api/index\"\n import { computed, onMounted, reactive, ref,watch,nextTick,toRefs, watchEffect,getCurrentInstance} from 'vue';\n    //  \"captchaType\":\"blockPuzzle\",\n    export default {\n        name: 'VerifySlide',\n        props: {\n            captchaType:{\n                type:String,\n            },\n            type: {\n                type: String,\n                default: '1'\n            },\n            //弹出式pop，固定fixed\n            mode: {\n                type: String,\n                default: 'fixed'\n            },\n            vSpace: {\n                type: Number,\n                default: 5\n            },\n            explain: {\n                type: String,\n                default: '向右滑动完成验证'\n            },\n            imgSize: {\n                type: Object,\n                default() {\n                    return {\n                        width: '310px',\n                        height: '155px'\n                    }\n                }\n            },\n            blockSize: {\n                type: Object,\n                default() {\n                    return {\n                        width: '50px',\n                        height: '50px'\n                    }\n                }\n            },\n            barSize: {\n                type: Object,\n                default() {\n                    return {\n                        width: '310px',\n                        height: '40px'\n                    }\n                }\n            }\n        },\n        setup(props,context){\n            const {mode,captchaType,vSpace,imgSize,barSize,type,blockSize,explain} = toRefs(props)\n            const { proxy } = getCurrentInstance();\n            let secretKey = ref(''),           //后端返回的ase加密秘钥\n                passFlag = ref(''),         //是否通过的标识\n                backImgBase = ref(''),      //验证码背景图片\n                blockBackImgBase = ref(''), //验证滑块的背景图片\n                backToken = ref(''),        //后端返回的唯一token值\n                startMoveTime = ref(''),    //移动开始的时间\n                endMovetime = ref(''),      //移动结束的时间\n                tipsBackColor = ref(''),    //提示词的背景颜色\n                tipWords = ref(''),\n                text = ref(''),\n                finishText = ref(''),\n                setSize = reactive({\n                    imgHeight: 0,\n                    imgWidth: 0,\n                    barHeight: 0,\n                    barWidth: 0\n                }),\n                top = ref(0),\n                left = ref(0),\n                moveBlockLeft = ref(undefined),\n                leftBarWidth = ref(undefined),\n                // 移动中样式\n                moveBlockBackgroundColor = ref(undefined),\n                leftBarBorderColor = ref('#ddd'),\n                iconColor = ref(undefined),\n                iconClass = ref('icon-right'),\n                status = ref(false),\t    //鼠标状态\n                isEnd = ref(false) ,\t\t//是够验证完成\n                showRefresh = ref(true),\n                transitionLeft = ref(''),\n                transitionWidth = ref(''),\n                startLeft = ref(0) \n\n                const barArea = computed(()=>{\n                    return proxy.$el.querySelector('.verify-bar-area')\n                })\n                function init() {\n                    text.value = explain.value\n                    getPictrue();\n                    nextTick(() => {\n                        let {imgHeight,imgWidth,barHeight,barWidth} = resetSize(proxy)\n                        setSize.imgHeight = imgHeight\n                        setSize.imgWidth = imgWidth\n                        setSize.barHeight = barHeight\n                        setSize.barWidth = barWidth\n                        proxy.$parent.$emit('ready', proxy)\n                    })\n\n                    window.removeEventListener(\"touchmove\", function (e) {\n                        move(e);\n                    });\n                    window.removeEventListener(\"mousemove\", function (e) {\n                        move(e);\n                    });\n\n                    //鼠标松开\n                    window.removeEventListener(\"touchend\", function () {\n                        end();\n                    });\n                    window.removeEventListener(\"mouseup\", function () {\n                        end();\n                    });\n\n                    window.addEventListener(\"touchmove\", function (e) {\n                        move(e);\n                    });\n                    window.addEventListener(\"mousemove\", function (e) {\n                        move(e);\n                    });\n\n                    //鼠标松开\n                    window.addEventListener(\"touchend\", function () {\n                        end();\n                    });\n                    window.addEventListener(\"mouseup\", function () {\n                        end();\n                    });\n                }\n                watch(type,()=>{\n                    init()\n                })\n                onMounted(()=>{\n                    // 禁止拖拽\n                    init()\n                    proxy.$el.onselectstart = function () {\n                        return false\n                    }\n                })\n                //鼠标按下\n                function start(e) {\n                    e = e || window.event\n                    if (!e.touches) {  //兼容PC端 \n                        var x = e.clientX;\n                    } else {           //兼容移动端\n                        var x = e.touches[0].pageX;\n                    }\n                    console.log(barArea);\n                    startLeft.value =Math.floor(x - barArea.value.getBoundingClientRect().left);\n                    startMoveTime.value = +new Date();    //开始滑动的时间\n                    if (isEnd.value == false) {\n                        text.value = ''\n                        moveBlockBackgroundColor.value = '#337ab7'\n                        leftBarBorderColor.value = '#337AB7'\n                        iconColor.value = '#fff'\n                        e.stopPropagation();\n                        status.value = true;\n                    }\n                }\n                //鼠标移动\n                function move(e) {\n                    e = e || window.event\n                    if (status.value && isEnd.value == false) {\n                        if (!e.touches) {  //兼容PC端 \n                            var x = e.clientX;\n                        } else {           //兼容移动端\n                            var x = e.touches[0].pageX;\n                        }\n                        var bar_area_left = barArea.value.getBoundingClientRect().left;\n                        var move_block_left = x - bar_area_left //小方块相对于父元素的left值\n                        if (move_block_left >= barArea.value.offsetWidth - parseInt(parseInt(blockSize.width) / 2) - 2) {\n                            move_block_left = barArea.value.offsetWidth - parseInt(parseInt(blockSize.width) / 2) - 2;\n                        }\n                        if (move_block_left <= 0) {\n                            move_block_left = parseInt(parseInt(blockSize.width) / 2);\n                        }\n                        //拖动后小方块的left值\n                        moveBlockLeft.value = (move_block_left - startLeft.value) + \"px\"\n                        leftBarWidth.value = (move_block_left - startLeft.value) + \"px\"\n                    }\n                }\n\n                //鼠标松开\n                function end() {\n                    endMovetime.value = +new Date(); \n                    //判断是否重合\n                    if (status.value && isEnd.value == false) {\n                        var moveLeftDistance = parseInt((moveBlockLeft.value || '').replace('px', ''));\n                        moveLeftDistance = moveLeftDistance * 310/ parseInt(setSize.imgWidth)\n                        let data = {\n                            captchaType:captchaType.value,\n                            \"pointJson\":secretKey.value ? aesEncrypt(JSON.stringify({x:moveLeftDistance,y:5.0}),secretKey.value):JSON.stringify({x:moveLeftDistance,y:5.0}),\n                            \"token\":backToken.value\n                        }\n                        reqCheck(data).then(res=>{\n                            if (res.repCode == \"0000\") {\n                                moveBlockBackgroundColor.value = '#5cb85c'\n                                leftBarBorderColor.value = '#5cb85c'\n                                iconColor.value = '#fff'\n                                iconClass.value = 'icon-check'\n                                showRefresh.value = false\n                                isEnd.value = true;   \n                                if (mode.value=='pop') {\n                                    setTimeout(()=>{\n                                        proxy.$parent.clickShow = false;\n                                        refresh();\n                                    },1500)\n                                }\n                                passFlag.value = true\n                                tipWords.value = `${((endMovetime.value-startMoveTime.value)/1000).toFixed(2)}s验证成功`\n                                var captchaVerification = secretKey.value ? aesEncrypt(backToken.value+'---'+JSON.stringify({x:moveLeftDistance,y:5.0}),secretKey.value):backToken.value+'---'+JSON.stringify({x:moveLeftDistance,y:5.0})\n                                setTimeout(()=>{\n                                    tipWords.value = \"\"\n                                    proxy.$parent.closeBox();\n                                    proxy.$parent.$emit('success', {captchaVerification})\n                                },1000)\n                            }else{\n                                moveBlockBackgroundColor.value = '#d9534f'\n                                leftBarBorderColor.value = '#d9534f'\n                                iconColor.value = '#fff'\n                                iconClass.value = 'icon-close'\n                                passFlag.value = false\n                                setTimeout(function () {\n                                    refresh();\n                                }, 1000);\n                                proxy.$parent.$emit('error',proxy)\n                                tipWords.value = \"验证失败\"\n                                setTimeout(()=>{\n                                        tipWords.value = \"\"\n                                },1000)\n                            }\n                        })\n                        status.value = false;\n                    }\n                }\n\n                const refresh = ()=>{\n                    showRefresh.value = true\n                    finishText.value = ''\n\n                    transitionLeft.value = 'left .3s'\n                    moveBlockLeft.value = 0\n\n                    leftBarWidth.value = undefined\n                    transitionWidth.value = 'width .3s'\n\n                    leftBarBorderColor.value = '#ddd'\n                    moveBlockBackgroundColor.value = '#fff'\n                    iconColor.value = '#000'\n                    iconClass.value = 'icon-right'\n                    isEnd.value = false\n\n                    getPictrue()\n                    setTimeout(() => {\n                        transitionWidth.value = ''\n                        transitionLeft.value = ''\n                        text.value = explain.value\n                    }, 300)\n                }\n\n                // 请求背景图片和验证图片\n                function getPictrue(){\n                    let data = {\n                        captchaType:captchaType.value\n                    }\n                    reqGet(data).then(res=>{\n                        if (res.repCode == \"0000\") {\n                            backImgBase.value = res.repData.originalImageBase64\n                            blockBackImgBase.value = res.repData.jigsawImageBase64\n                            backToken.value = res.repData.token\n                            secretKey.value = res.repData.secretKey\n                        }else{\n                            tipWords.value = res.repMsg;\n                        }\n                    })\n                }\n                return {\n                    secretKey,           //后端返回的ase加密秘钥\n                    passFlag,         //是否通过的标识\n                    backImgBase,      //验证码背景图片\n                    blockBackImgBase, //验证滑块的背景图片\n                    backToken,        //后端返回的唯一token值\n                    startMoveTime,    //移动开始的时间\n                    endMovetime,      //移动结束的时间\n                    tipsBackColor,    //提示词的背景颜色\n                    tipWords,\n                    text,\n                    finishText,\n                    setSize,\n                    top,\n                    left,\n                    moveBlockLeft,\n                    leftBarWidth,\n                    // 移动中样式\n                    moveBlockBackgroundColor,\n                    leftBarBorderColor,\n                    iconColor,\n                    iconClass,\n                    status,\t    //鼠标状态\n                    isEnd,\t\t//是够验证完成\n                    showRefresh,\n                    transitionLeft,\n                    transitionWidth,\n                    barArea,\n                    refresh,\n                    start\n                }\n        },\n    }\n</script>\n\n"]}]}